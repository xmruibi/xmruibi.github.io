<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Two Pointer on Coder Thinking -- Home Page</title>
    <link>http://xmruibi.github.io/tags/two-pointer/</link>
    <description>Recent content in Two Pointer on Coder Thinking -- Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xmruibi@gmail.com (Rui Bi)</managingEditor>
    <webMaster>xmruibi@gmail.com (Rui Bi)</webMaster>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Sun, 18 Oct 2015 11:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/tags/two-pointer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Intersection of Two Linked Lists</title>
      <link>http://xmruibi.github.io/2015/10/18/intersection-of-two-linked-lists/</link>
      <pubDate>Sun, 18 Oct 2015 11:43:13 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/10/18/intersection-of-two-linked-lists/</guid>
      <description>

&lt;p&gt;Write a program to find the node at which the intersection of two singly linked lists begins.&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;The following two linked lists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;begin to intersect at node c1.&lt;/p&gt;

&lt;h3 id=&#34;note&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Count the length of each linked list&lt;/li&gt;
&lt;li&gt;Make two counts to be equal, then start moving and check if there are two nodes the same as each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;public class Solution {
    /**
     * @param headA: the first list
     * @param headB: the second list
     * @return: a ListNode 
     */
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        ListNode a = headA;
        ListNode b = headB;
        int alen = 0, blen = 0;
        
        while(a!=null) {
            a = a.next;
            alen++;
        }
        while(b!=null) {
            b = b.next;
            blen++;
        }
        
        while(alen &amp;gt; blen) {
            headA = headA.next;
            alen--;
        }
        
        while(alen &amp;lt; blen) {
            headB = headB.next;
            blen--;
        }
        
        while(headA != null &amp;amp;&amp;amp; headB != null) {
            if(headA == headB)
                return headA;
            headA = headA.next;
            headB = headB.next;
        }
        return null;
    }  
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Partition Array</title>
      <link>http://xmruibi.github.io/2015/10/08/partition-array/</link>
      <pubDate>Thu, 08 Oct 2015 22:10:29 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/10/08/partition-array/</guid>
      <description>&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of integers and an int &lt;code&gt;k&lt;/code&gt;, partition the array (i.e move the elements in &amp;laquo;nums&amp;raquo;) such that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All elements &amp;lt; k are moved to the left&lt;/li&gt;
&lt;li&gt;All elements &amp;gt;= k are moved to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Return the partitioning index, i.e the first index i nums[i] &amp;gt;= k.&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical index rotate two pointer problem, looks like the idea of quick sort .&lt;/li&gt;
&lt;li&gt;Set an index &lt;code&gt;pivot&lt;/code&gt; for marking the real position of element less than &lt;code&gt;k&lt;/code&gt; during pass the orginal array.&lt;/li&gt;
&lt;li&gt;Once the current passing index &lt;code&gt;i&lt;/code&gt; hits the element less than &lt;code&gt;k&lt;/code&gt;, we do the swap with &lt;code&gt;pivot&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;pivot&lt;/code&gt; should add 1 after swap since the marked position is increase for next one.&lt;/li&gt;
&lt;li&gt;However in new &lt;code&gt;pivot&lt;/code&gt; position we not sure the element&amp;rsquo;s value, so&amp;hellip; we need to check in next procedure.&lt;/li&gt;
&lt;li&gt;Make sure the &lt;code&gt;i&lt;/code&gt; position decrease 1, because we just did a swap and we need to check the new &lt;code&gt;i&lt;/code&gt; is less than &amp;lsquo;k&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;public class Solution {
    /** 
     *@param nums: The integer array you should partition
     *@param k: As description
     *return: The index after partition
     */
    public int partitionArray(int[] nums, int k) {
        if(nums == null || nums.length == 0)
            return 0;
            
        int pivot = 0;
        for(int i = 0; i &amp;lt; nums.length; i++) {
            if(i &amp;gt; pivot &amp;amp;&amp;amp; nums[i] &amp;lt; k) {
                int tmp = nums[pivot];
                nums[pivot++] = nums[i];
                nums[i--] = tmp;
            }
        }
        // this is just for corner case when the last element still less than k
        if(nums[nums.length - 1] &amp;lt; k)
            return nums.length;
        return pivot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search In 2D Matrix II</title>
      <link>http://xmruibi.github.io/2015/09/22/search-in-2d-matrix-ii/</link>
      <pubDate>Tue, 22 Sep 2015 13:35:30 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/09/22/search-in-2d-matrix-ii/</guid>
      <description>

&lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.&lt;/p&gt;

&lt;p&gt;This matrix has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Integers in each row are sorted from left to right.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integers in each column are sorted from up to bottom.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No duplicate integers in each row or column.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Typical Matrix Search Problem, using a condition for driven coordinate moving.&lt;/li&gt;
&lt;li&gt;Here the value and target comparasion is the driven condition.&lt;/li&gt;
&lt;li&gt;Since the sorted matrix, we can start from right top element.&lt;/li&gt;
&lt;li&gt;Because on the diagonal from right top to left down, all the left elements are less than the right elments.&lt;/li&gt;
&lt;li&gt;So we have three type of running condition and set the x, y coordinate differently.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param: A number you want to search in the matrix
     * @return: An integer indicate the occurrence of target in the given matrix
     */

    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0)
            return 0;
        int rightTop = matrix[0][matrix[0].length - 1];
        int x = 0, y = matrix[0].length - 1;
        int occ = 0;
        while(x &lt; matrix.length &amp;&amp; y &gt;= 0) {
            int cur = matrix[x][y];
            if(cur == target) {
                occ ++;
                x++; y--;
            }else if(cur &lt; target)
                x++;
            else
                y--;
        }       
        return occ;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search In 2D Matrix I</title>
      <link>http://xmruibi.github.io/2015/09/21/search-in-2d-matrix-i/</link>
      <pubDate>Mon, 21 Sep 2015 13:37:08 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/09/21/search-in-2d-matrix-i/</guid>
      <description>

&lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix.&lt;/p&gt;

&lt;p&gt;This matrix has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integers in each row are sorted from left to right.&lt;/li&gt;
&lt;li&gt;The first integer of each row is greater than the last integer of the previous row.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;First binary search with checking the first element in each row so that we can find the row may contain the target number;&lt;/li&gt;
&lt;li&gt;So we search the lowbound of target number. However, we also can do if the element is just equals to target number then directly return for reducing time.&lt;/li&gt;
&lt;li&gt;Once we get the target row, then we do the second binary search in this row to find the target number.&lt;/li&gt;
&lt;li&gt;All in all, two binary search to find the target!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0)
            return false;
        
        int up = 0, down = matrix.length - 1;
        while(up &lt; down - 1) {
            int mrow = up + ((down - up) &gt;&gt; 1);
            if(matrix[mrow][0] == target)
                return true;
            if(matrix[mrow][0] &lt; target)
                up = mrow;
            else
                down = mrow;
        }
        int curRow;
        if(matrix[up][0] &gt; target)
            return false;
        else if(matrix[up][0] &lt;= target &amp;&amp; matrix[down][0] &gt; target)
            curRow = up;
        else
            curRow = down;
        
        int l = 0, r = matrix[curRow].length - 1;
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt; 1);
            if(matrix[curRow][m] == target)
                return true;
            else if(matrix[curRow][m] &lt; target)
                l = m;
            else
                r = m;
        }
        
        if(matrix[curRow][l] == target || matrix[curRow][r] == target)
            return true;
        else
            return false;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>