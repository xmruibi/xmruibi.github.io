<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bit Manipulation on Geek Think</title>
    <link>http://xmruibi.github.io/tags/bit-manipulation/</link>
    <description>Recent content in Bit Manipulation on Geek Think</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Thu, 22 Oct 2015 14:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/tags/bit-manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Update Bits</title>
      <link>http://xmruibi.github.io/2015/10/22/update-bits/</link>
      <pubDate>Thu, 22 Oct 2015 14:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/10/22/update-bits/</guid>
      <description>

&lt;p&gt;Given two 32-bit numbers, N and M, and two bit positions, i and j. Write a method to set all bits between i and j in N equal to M (e g , M becomes a substring of N located at i and starting at j).&lt;/p&gt;

&lt;h3 id=&#34;example:371436709d1e9f5c02757abafc92508e&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Given N=&lt;code&gt;(10000000000)2&lt;/code&gt;, M=&lt;code&gt;(10101)2&lt;/code&gt;, i=&lt;code&gt;2&lt;/code&gt;, j=&lt;code&gt;6&lt;/code&gt;
return N=&lt;code&gt;(10001010100)2&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;note:371436709d1e9f5c02757abafc92508e&#34;&gt;Note&lt;/h3&gt;

&lt;p&gt;In the function, the numbers N and M will given in decimal, you should also return a decimal number.&lt;/p&gt;

&lt;h3 id=&#34;challenge:371436709d1e9f5c02757abafc92508e&#34;&gt;Challenge&lt;/h3&gt;

&lt;p&gt;Minimum number of operations?&lt;/p&gt;

&lt;h3 id=&#34;clarification:371436709d1e9f5c02757abafc92508e&#34;&gt;Clarification&lt;/h3&gt;

&lt;p&gt;You can assume that the bits j through i have enough space to fit all of M. That is, if M = &lt;code&gt;10011&lt;/code&gt;, you can assume that there are at least 5 bits between j and i. You would not, for example, have j=3 and i=2, because M could not fully fit between bit 3 and bit 2.&lt;/p&gt;

&lt;h2 id=&#34;think:371436709d1e9f5c02757abafc92508e&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set a mask:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Position:   31 30 ..~.. j+1  j ..~.. i  i-1 ..~.. 0
Bit Val:     1  1  ...   1   0  ...  0   1   ...  1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use that mask to do &lt;code&gt;&amp;amp;&lt;/code&gt; with N, so that in the new N, the position i~j will be zero.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Left shift &lt;code&gt;i&lt;/code&gt; for M to make the position aligned.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do &lt;code&gt;|&lt;/code&gt; for M and N, then get the final result.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution:371436709d1e9f5c02757abafc92508e&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Solution {
    /**
     *@param n, m: Two integer
     *@param i, j: Two bit positions
     *return: An integer
     */
    public int updateBits(int n, int m, int i, int j) {
        
        int mask = 0;
        for(int lfShift = 31; lfShift &amp;gt; j; lfShift--) 
            mask += (1&amp;lt;&amp;lt;lfShift);
        
        for(int lfShift = i - 1; lfShift &amp;gt;= 0; lfShift--) 
            mask += (1&amp;lt;&amp;lt;lfShift);
        n &amp;amp;= mask;
        m &amp;lt;&amp;lt;= i;
        return n|m;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>