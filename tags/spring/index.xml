<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Geek Think</title>
    <link>http://xmruibi.github.io/tags/spring/</link>
    <description>Recent content in Spring on Geek Think</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Sun, 09 Aug 2015 10:56:15 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Architecture Design on Social Music Search project</title>
      <link>http://xmruibi.github.io/code/SpringBoot/</link>
      <pubDate>Sun, 09 Aug 2015 10:56:15 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/code/SpringBoot/</guid>
      <description>

&lt;h2 id=&#34;framework-why-spring-boot:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Framework: Why Spring Boot?&lt;/h2&gt;

&lt;p&gt;Spring framework goes every where in current enterprise application. However, most of people are familiar with Spring MVC. Here I just want to introduce a new Spring Boot project. Hear what its official document said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can &amp;ldquo;just run&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, unlike Spring MVC, the Spring Boot require less configuration and easier to deploy on remote virtual machine or cloud computing platform. Spring Boot has following features:&lt;/p&gt;

&lt;h4 id=&#34;features:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create stand-alone Spring applications&lt;/li&gt;
&lt;li&gt;Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)&lt;/li&gt;
&lt;li&gt;Provide opinionated &amp;lsquo;starter&amp;rsquo; POMs to simplify your Maven configuration&lt;/li&gt;
&lt;li&gt;Automatically configure Spring whenever possible&lt;/li&gt;
&lt;li&gt;Provide production-ready features such as metrics, health checks and externalized configuration&lt;/li&gt;
&lt;li&gt;Absolutely no code generation and no requirement for XML configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;spring-boot-app-configuration:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Spring Boot App Configuration&lt;/h2&gt;

&lt;p&gt;The Spring Boot requires some basic configuration and set up the bootstrap entrance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It doesn&amp;rsquo;t need &lt;code&gt;web.xml&lt;/code&gt; whic is common for Spring MVC;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up the bootstrap by Maven plugin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bootstrap Main function (Entrance of Spring Boot App): MusicSearchApplication;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Spring Configuration (config package)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ApplicationConfig&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@PropertySource(&amp;quot;classpath:application.properties&amp;quot;) // point out the application.properties as configuration source
public class ApplicationConfig {
    public @Bean LoggingEventListener mongoEventListener() {
        return new LoggingEventListener();
    }


}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;WebMVCConfig&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;@Configuration
@ComponentScan({&amp;quot;com.musicSearch.core.controller&amp;quot;,&amp;quot;com.musicSearch.core.service&amp;quot;,&amp;quot;com.musicSearch.core.domain&amp;quot;}) // here is important to do component scan
public class WebMVCConfig extends WebMvcConfigurerAdapter {
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController(&amp;quot;/static&amp;quot;)
                .setViewName(&amp;quot;forward:/index.html&amp;quot;);
        // point out the .css/.js or other static files target and default home page
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ApplicationInitializer: Core entrance configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@EnableAutoConfiguration
@Import({ MongoDBConfig.class, ElasticSearchConfig.class,
        ApplicationConfig.class, WebMVCConfig.class,
        RepositoryRestMvcConfiguration.class })
public class MusicSearchApplication extends SpringBootServletInitializer {


    public static void main(String[] args) {
        SpringApplication.run(MusicSearchApplication.class, args);
    }


    @Override
    protected SpringApplicationBuilder configure(
            SpringApplicationBuilder application) {
        return application.sources(MusicSearchApplication.class);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;design-detail:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Design Detail&lt;/h2&gt;

&lt;p&gt;Here is how I design my Social Music Search project with Spring Boot:&lt;/p&gt;

&lt;h3 id=&#34;restful-serivce-to-do-the-backend-and-frontend-communication:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;RESTful Serivce to do the backend and frontend communication&lt;/h3&gt;

&lt;h4 id=&#34;spring-data-rest:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Spring-Data-REST&lt;/h4&gt;

&lt;p&gt;Based on Spring Boot as backend, I set up the RESTful interface by using Spring-Data-REST API:
- Config: ApplicationConfig;
- service;
- controller;&lt;/p&gt;

&lt;h3 id=&#34;non-sql-database-mongodb-to-be-the-database-solution:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Non-SQL database, MongoDB, to be the database solution&lt;/h3&gt;

&lt;p&gt;Spring-Data-MongoDB&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config: MongoDBConfig;&lt;/li&gt;
&lt;li&gt;repository;&lt;/li&gt;
&lt;li&gt;domain: Music, BulletComment, User, Genre&amp;hellip;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;indexing-service:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Indexing Service&lt;/h3&gt;

&lt;p&gt;Spring-Data-ElasticSearch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config: ElasticSearchConfig; (port:9300)&lt;/li&gt;
&lt;li&gt;index.repository;&lt;/li&gt;
&lt;li&gt;index.domain: Indexed Music;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference:2981cc31fb77e1cf124cb05c7daf63c0&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://projects.spring.io/spring-boot/&#34;&gt;Spring Official Site&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>