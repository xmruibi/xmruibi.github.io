<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iterator on Rui&#39;s Home Page</title>
    <link>http://xmruibi.github.io/tags/iterator/</link>
    <description>Recent content in Iterator on Rui&#39;s Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xmruibi@gmail.com (Rui Bi)</managingEditor>
    <webMaster>xmruibi@gmail.com (Rui Bi)</webMaster>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Sun, 18 Oct 2015 22:10:29 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/tags/iterator/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Iterator and Top N Element</title>
      <link>http://xmruibi.github.io/2015/10/18/iterator-and-top-n-element/</link>
      <pubDate>Sun, 18 Oct 2015 22:10:29 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/10/18/iterator-and-top-n-element/</guid>
      <description>

&lt;p&gt;Given a Iterator with next giving instances of Line class
Design the function:&lt;code&gt;List&amp;lt;String&amp;gt; get_top_ips(Iterator iterator, int topN)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Line { 
	String ip; 
	String request; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
	public List&amp;lt;String&amp;gt; get_top_ips(Iterator iterator, int topN) {
		Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
		while(itertor.hasNext()) {
			Line cur = iterator.next();
			map.put(cur.ip, map.containsKey(cur.ip)? map.get(cur.ip) + 1 : 1);
		}
		PriorityQueue&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt; heap = new PriorityQueue&amp;lt;&amp;gt;(new Comparator&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt;(){
			@Override
			public int compare(Map.Entry&amp;lt;String, Integer&amp;gt; o1, Map.Entry&amp;lt;String, Integer&amp;gt; o2){
				return Integer.compare(o2.getValue(), o1.getValue());
			}
		});
		for(Map.Entry&amp;lt;String, Integer&amp;gt; entry : map) {
			heap.offer(entry);
		}
		List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
		while(topN &amp;gt; 0) {
			res.add(heap.poll().getKey());
		}
		return res;
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterator of 2-D Array</title>
      <link>http://xmruibi.github.io/2015/09/28/iterator-of-2-d-array/</link>
      <pubDate>Mon, 28 Sep 2015 10:10:29 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/09/28/iterator-of-2-d-array/</guid>
      <description>

&lt;p&gt;Set up a iterator to iterate a 2-dimensional array.
By given the following code, finish all class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class DeepIterator{
    
    public DeepIterator(int[][] listOfLists){
	    ...
	}
	
	...
	public static void main(String[] args) {
        int[][] listOfLists = {
          {},{},{1,2,3},{},{},{2,3,4}
        };
        DeepIterator it = new DeepIterator(listOfLists);
        while(it.hasNext()){
            System.out.println(it.next());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;think&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Iterate the 2-D array by &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Record current element during &lt;code&gt;hasNext()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Check the row if it is null.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class DeepIterator{
    int cur; // this is important
    int row = 0, col = 0;

    int[][] listOfLists;

    public DeepIterator(int[][] listOfLists){
        if(listOfLists == null)
            throw new IllegalArgumentException(&amp;quot;Null Input&amp;quot;);
        this.listOfLists = listOfLists;
    }

    public Integer next(){
        return cur;
    }

    public boolean hasNext(){
        // make sure the row is not null
        while(row &amp;lt; listOfLists.length &amp;amp;&amp;amp; col &amp;gt;= listOfLists[row].length) {
                row ++; col = 0;
        }
        if(row &amp;lt; listOfLists.length) {
            cur = listOfLists[row][col++];
            return true;
        }else
            return false;
    }

    public static void main(String[] args) {
        int[][] listOfLists = {
          {},{},{1,2,3},{},{},{2,3,4}
        };
        DeepIterator it = new DeepIterator(listOfLists);
        while(it.hasNext()){
          System.out.println(it.next());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Iterator of Iterator</title>
      <link>http://xmruibi.github.io/2015/09/28/iterator-of-iterator/</link>
      <pubDate>Mon, 28 Sep 2015 10:10:29 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/2015/09/28/iterator-of-iterator/</guid>
      <description>

&lt;p&gt;Create an iterator of iterator, supporting any type in Java. The purpose is to iterate over the objects of the iterators.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.*;

public class Iterators&amp;lt;T&amp;gt; implements Iterator&amp;lt;T&amp;gt; {
    
    private Iterator&amp;lt;T&amp;gt; current; // the current concrete iterator (small, detail)
    private Iterator&amp;lt;Iterator&amp;lt;T&amp;gt;&amp;gt; cursor; // the cursor iterator which current iterator belong to (big, indexing)
    
    public Iterators(Iterable&amp;lt;Iterator&amp;lt;T&amp;gt;&amp;gt; iterators) {
        if (iterators == null) throw new IllegalArgumentException(&amp;quot;iterators is null&amp;quot;);
        this.cursor = iterators.iterator();
    }
    
    private Iterator findNext() {
        while(cursor.hasNext()) {
            current = cursor.next();
            if(current.hasNext())
                return current;
        }
        return null;
    }
    
    @Override
    public boolean hasNext() {
        if(current == null || !current.hasNext())
            current = findNext();
        // make sure the current iterator has next
        return (current != null &amp;amp;&amp;amp; current.hasNext());
    }

    @Override
    public T next() {       
        return current.next();
    }

    
    @Override
    public void remove() {
        if (current != null) {
            current.remove();
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>