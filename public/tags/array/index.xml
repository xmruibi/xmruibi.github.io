<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Array on Geek Think</title>
    <link>http://xmruibi.github.io/tags/array/</link>
    <description>Recent content in Array on Geek Think</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Fri, 20 Nov 2015 22:43:13 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/tags/array/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Few questions from Old Version</title>
      <link>http://xmruibi.github.io/2015/11/20/few-questions-from-old-version/</link>
      <pubDate>Fri, 20 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/20/few-questions-from-old-version/</guid>
      <description>

&lt;h2 id=&#34;probelam-i-grey-code:283efc603582dcc162156c3c3c334a6b&#34;&gt;Probelam I: Grey Code&lt;/h2&gt;

&lt;p&gt;Given 2 numbers. Find if they are consecutive gray (grey) code sequences.&lt;/p&gt;

&lt;h2 id=&#34;solution:283efc603582dcc162156c3c3c334a6b&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int greyCode(byte term1, byte term2) {
		byte x = (byte)(term1 ^ term2);
		int total = 0;
		while(x != 0){
			x = (byte) (x &amp;amp; (x - 1));
			total++;
		}
		if(total == 1) 
			return 1; 
		else 
			return 0;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;probelam-ii-remove-vowels:283efc603582dcc162156c3c3c334a6b&#34;&gt;Probelam II: Remove Vowels&lt;/h2&gt;

&lt;h2 id=&#34;solution-1:283efc603582dcc162156c3c3c334a6b&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int removeVowel(String str) {
		StringBuffer sb = new StringBuffer();
		String v = &amp;quot;aeiouAEIOU&amp;quot;;
		for(int i = 0; i &amp;lt; string.length(); i++){
			if(v.indexOf(string.charAt(i)) &amp;gt; -1)
		 		continue;
			sb.append(string.charAt(i));
		}
		return sb.toStirng();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-iii:283efc603582dcc162156c3c3c334a6b&#34;&gt;Problem III:&lt;/h2&gt;

&lt;p&gt;String rotation (if string is the rotate of the other)&lt;/p&gt;

&lt;h2 id=&#34;solution-2:283efc603582dcc162156c3c3c334a6b&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;boolean isRotation(String s1,String s2) {  
    return (s1.length() == s2.length()) &amp;amp;&amp;amp; ((s1+s1).indexOf(s2) != -1);  
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Game of Life</title>
      <link>http://xmruibi.github.io/2015/11/19/game-of-life/</link>
      <pubDate>Thu, 19 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/19/game-of-life/</guid>
      <description>

&lt;p&gt;Given an array which represents a group of cells, their states are changing everyday according to some rule.&lt;/p&gt;

&lt;h2 id=&#34;problem-i:bd78b8dc0ea88ac5e1b12dcd60867418&#34;&gt;Problem I&lt;/h2&gt;

&lt;p&gt;The following rules is for rule one:
- if the cell has the same numbers on its two sides, set it as &lt;code&gt;0&lt;/code&gt;;
- if the cell has the different numbers on its two sides, set it as &lt;code&gt;0&lt;/code&gt;;&lt;/p&gt;

&lt;h3 id=&#34;example:bd78b8dc0ea88ac5e1b12dcd60867418&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;cell: (0)[1, 0, 0, 0, 0, 1, 0, 0](0)
days1: [0, 1, 0, 0, 1, 0, 1, 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:bd78b8dc0ea88ac5e1b12dcd60867418&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int[] cellChange(int[] arr, int days) {
		for(int i = 0; i &amp;lt; days; i++)
			changeHelper(arr);
		return arr;
	}

	private void changeHelper(int[] arr) {
		int bound = 0, prev = 0;
		for(int i = 0; i &amp;lt; arr.length; i++) {
			if(i == 0) {
				prev = arr[i];
				arr[i] = (bound == arr[1]?0:1);
			}else if(i == arr.length - 1) {
				arr[i] = (bound == prev?0:1);
			}else{
				int tmp = arr[i];
				arr[i] = (prev == arr[i+1]?0:1);
				prev = tmp;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-ii:bd78b8dc0ea88ac5e1b12dcd60867418&#34;&gt;Problem II&lt;/h2&gt;

&lt;p&gt;According to the Wikipedia&amp;rsquo;s article:
&amp;gt; The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&lt;/p&gt;

&lt;p&gt;Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Any live cell with fewer than two live neighbors dies, as if caused by under-population.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbors lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbors dies, as if by over-population..&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Write a function to compute the next state (after one update) of the board given its current state.&lt;/p&gt;

&lt;h3 id=&#34;follow-up:bd78b8dc0ea88ac5e1b12dcd60867418&#34;&gt;Follow-up&lt;/h3&gt;

&lt;p&gt;Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Find a Path in Maze</title>
      <link>http://xmruibi.github.io/2015/11/19/find-a-path-in-maze/</link>
      <pubDate>Thu, 19 Nov 2015 12:33:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/19/find-a-path-in-maze/</guid>
      <description>

&lt;p&gt;Find path in given 2D matrix. 3 states, &lt;code&gt;0&lt;/code&gt; means allow to go, &lt;code&gt;1&lt;/code&gt; means the obstacle, &lt;code&gt;9&lt;/code&gt; is the final, return true or false if the path exist from &lt;code&gt;(0,0)&lt;/code&gt; to any position contains &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solution:6bea082703d3b73c0480d7f0afc663d2&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    private final static int[] sx = {-1, 0, 0, 1};
    private final static int[] sy = {0, 1, -1, 0};
    public boolean findPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)  
            return false;
        if (matrix[0][0] == 9)  
            return true;
        int m = matrix.length, n = matrix[0].length;
        Queue&amp;lt;int[]&amp;gt; queue = new LinkedList&amp;lt;int[]&amp;gt;();
        queue.offer(new int[]{0, 0});
        matrix[0][0] = 1;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            for (int i = 0; i &amp;lt; 4; i++) {
                int[] next = {cur[0] + sx[i], cur[1] + sy[i]};
                if (next[0] &amp;gt;= 0 &amp;amp;&amp;amp; next[0] &amp;lt; m &amp;amp;&amp;amp; next[1] &amp;gt;= 0 &amp;amp;&amp;amp; next[1] &amp;lt; n) {
                    if (matrix[next[0]][next[1]] == 9)
                            return true;
                    else if (matrix[next[0]][next[1]] == 0) {
                        queue.offer(next);
                        matrix[next[0]][next[1]] = 1; // set the previous passed position as no longer accessiable 
                    }
                }
            }
        }
        return false;

    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find if Two Rectangles Overlap</title>
      <link>http://xmruibi.github.io/2015/11/19/find-if-two-rectangles-overlap/</link>
      <pubDate>Thu, 19 Nov 2015 12:33:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/19/find-if-two-rectangles-overlap/</guid>
      <description>

&lt;p&gt;Given two rectangles, find if the given two rectangles overlap or not. Note that a rectangle can be represented by two coordinates, top left and bottom right. So mainly we are given following four coordinates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l1: Top Left coordinate of first rectangle.&lt;/li&gt;
&lt;li&gt;r1: Bottom Right coordinate of first rectangle.&lt;/li&gt;
&lt;li&gt;l2: Top Left coordinate of second rectangle.&lt;/li&gt;
&lt;li&gt;r2: Bottom Right coordinate of second rectangle.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Rectangle{
	Point topLeft;
	Point rightBottom;
	public Rectangle(Point topLeft, Point rightBottom){
		this.topLeft = topLeft;
		this.rightBottom = rightBottom;
	}
}
class Point{
	int x;
	int y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:349119d14e4a4f28c56258b5d1239743&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public boolean overlapRectangle(Rectangle r1, Rectangle r2) {
		// If one rectangle is on left side of other
		if (r1.rightBottom.x &amp;gt;= r2.topLeft.x || r1.topLeft.x &amp;gt;= r2.rightBottom.x)
		    return false;	

		// If one rectangle is above other
		if (r1.rightBottom.y &amp;gt;= r2.topLeft.y || r2.rightBottom.y &amp;gt;= r1.topLeft.y)
		    return false;
		 
		return true;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Arithmetic Sequence</title>
      <link>http://xmruibi.github.io/2015/11/18/arithmetic-sequence/</link>
      <pubDate>Wed, 18 Nov 2015 13:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/arithmetic-sequence/</guid>
      <description>

&lt;p&gt;A sequence of numbers is called &lt;em&gt;Arithmetic&lt;/em&gt; if it consists of at least three elements and if the difference between any two consecutive elements is the same. For example, &lt;code&gt;[1,3,5,7,9]&lt;/code&gt;, &lt;code&gt;[7,7,7,7,7]&lt;/code&gt; and &lt;code&gt;[3,-1,-5,-9]&lt;/code&gt; are arithmetic.&lt;/p&gt;

&lt;p&gt;A slice (P, Q) of Array A is called arithmetic if the sequence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	A[P], A[P+1], ..., A[Q-1],A[Q]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is arthmetic. In particular, this means that &lt;code&gt;P+1 &amp;lt; Q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a function: &lt;code&gt;class Solution { public int solution(int[] A);}&lt;/code&gt; that, given array &lt;code&gt;A&lt;/code&gt; consisting of &lt;code&gt;N&lt;/code&gt; numbers, returns the number of arithmetic slices in &lt;code&gt;A&lt;/code&gt;. The function should return &lt;code&gt;-1&lt;/code&gt; if the result exceeds 1,000,000,000.&lt;/p&gt;

&lt;h3 id=&#34;example:fe4862e12cf7144de624f77907b24b10&#34;&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;A[0] = -1, A[1] = 1, A[2] = 3, A[3] = 3, A[4] = 3, A[5] = 2, A[6] = 1, A[7] = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should return &lt;code&gt;5&lt;/code&gt; since there are five arithmetic slices of that array, namely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{0, 2}, {2, 4}, {4, 6}, {4, 7}, {5, 7}
``


## Solution
```java
public class Solution{
	public int countArithmetic(int[] array) {
		if(array.length &amp;lt; 3) 
			return 0;
		int total = 0;
		int idx = 1;
		int prev = 0;
		while(prev &amp;lt; array.length) {
			int curSlice = 2;
			int diff = array[idx] - array[idx-1];
			// if the difference between two consecutive numbers is the same
			while(++idx &amp;lt; array.length &amp;amp;&amp;amp; array[idx] - array[idx-1] == diff) {
				curSlice++;
			}

			if(curSlice &amp;gt;= 3) {
				// when slice length = 3 -&amp;gt; count 1, = 4 -&amp;gt; 1*2, = 5 -&amp;gt; 1*2*3...
				total += ((curSlice - 2) * (curSlice - 1) / 2);
			}
			prev = idx;
		}
		return (total &amp;gt; 1000000000) ? -1 :total;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sum of Difference on Four Integers</title>
      <link>http://xmruibi.github.io/2015/11/18/sum-of-difference-on-four-integers/</link>
      <pubDate>Wed, 18 Nov 2015 13:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/sum-of-difference-on-four-integers/</guid>
      <description>

&lt;p&gt;Given four integers, make &lt;code&gt;F(S)&lt;/code&gt; = &lt;code&gt;abs(S[0] - S[1])&lt;/code&gt; + &lt;code&gt;abs(S[1] - S[2])&lt;/code&gt; + &lt;code&gt;abs(S[2] - S[3])&lt;/code&gt; to be largest.&lt;/p&gt;

&lt;h2 id=&#34;solution-general-method:b95750bdbb505b858c5f59e1fd60a5ee&#34;&gt;Solution #General Method&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
    public int maxDiff(int[] arr) {
        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();
        permutation(res, new ArrayList&amp;lt;&amp;gt;(), arr);
        int max = 0;
        List&amp;lt;Integer&amp;gt; maxLine = new ArrayList&amp;lt;&amp;gt;();
        for(List&amp;lt;Integer&amp;gt; each : res) {
            int cur = 0;
            for(int i = 1; i &amp;lt; each.size(); i++) 
                cur += Math.abs(each.get(i) - cur.get(i-1));
            if(max &amp;lt;= cur) {
                max = cur;
                maxLine = each;
            }
        }
        System.out.println(maxLine);
        return max;
    }

    private void permutation(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res, List&amp;lt;Integer&amp;gt; curRes, int[] arr) {
        if(curRes.size() == arr.length) {
            res.add(new ArrayList&amp;lt;&amp;gt;(curRes));
            return;
        }

        for(int i = 0; i &amp;lt; arr.length; i++) {
            if(curRes.contains(arr[i]))
                continue;
            curRes.add(arr[i]); 
            permutation(res, curRes, arr);
            curRes.remove(curRes.size() - 1);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Process Schedule Problems</title>
      <link>http://xmruibi.github.io/2015/11/18/process-schedule-problems/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/process-schedule-problems/</guid>
      <description>&lt;p&gt;Given the max size of a LRU cache and a input array, calculate the miss times.&lt;/p&gt;

&lt;p&gt;## Solution&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int CacheMiss(int[] array, int size) {
		if(array == null)	
			return 0;
		Queue&amp;lt;Integer&amp;gt; cache = new LinkedList&amp;lt;Integer&amp;gt;();
		HashSet&amp;lt;Integer&amp;gt; hash = new HashSet&amp;lt;&amp;gt;();
		int count = 0;
		for (int i = 0; i &amp;lt; array.length; i++) {
			if(hash.contains(array[i])) {
				cache.remove(array[i]); // if hit it need to move it back, so remove here at first
			} else {
				count++; // miss, increse the count
			}
			cache.add(array[i]);
			hash.add(new Integer(array[i]));
			if (size == cache.size()) // over size, poll the first of queue
				cache.poll();
		}
		return count;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Process Schedule Problems</title>
      <link>http://xmruibi.github.io/2015/11/18/process-schedule-problems/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/process-schedule-problems/</guid>
      <description>

&lt;p&gt;Process schedule is very important to Operation System. There are several algorithm to deal with such problem. Here we discuss two of them. At first, we are given a process class for coding conveninence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	private class Process{
		int arrTime;
		int exeTime;
		public Process(int arrTime, int exeTime) {
			this.arrTime = arrTime;
			this.exeTime = exeTime;
		}
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-one:fd5fbfca02af2e560dbb93ca15b4bf95&#34;&gt;Problem One&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Robin Round:&lt;/strong&gt; The question is about the robin round. Given an array with start time of each task and another array represent the executing time of each task and &lt;code&gt;q&lt;/code&gt; for quantum which is allowance of CPU time, means the maximum time for exeuting one task. Write a function, calculate the average waiting time on each task.&lt;/p&gt;

&lt;h2 id=&#34;solution-robin-round:fd5fbfca02af2e560dbb93ca15b4bf95&#34;&gt;Solution #Robin Round&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public double robinRound(int[] arrTime, int[] exeTime, int q) {
		if(arrTime == null || exeTime == null || arrTime.length == 0 || exeTime.length == 0)
			return 0;
		Queue&amp;lt;Process&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;();
		int idx = 0, waitTime = 0, curTime = 0;
		while(idx &amp;lt; arrTime.length || !queue.isEmpty()) {
			if(queue.isEmpty()) {
				queue.offer(new Process(arrTime[idx], exeTime[idx]));
				curTime = arrTime[idx++];
			}else{
				Process curProcess = queue.poll();
				waitTime += (curTime - curProcess.arrTime);
				curTime += Math.min(curProcess.exeTime, q);
				// push those process which has arrival time less than current time
				while(idx &amp;lt; arrTime.length &amp;amp;&amp;amp; arrTime[idx] &amp;lt; curTime) {
					queue.offer(new Process(arrTime[idx], exeTime[idx++]));
				}
				// if current process didn&#39;t be processed at all, push it back to queue
				if(curProcess.exeTime &amp;gt; q) {
					curProcess.exeTime -= q; 
					queue.offer(curProcess);
				}
			}
		}
		return (double) waitTime / (double) arrTime.length;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-two:fd5fbfca02af2e560dbb93ca15b4bf95&#34;&gt;Problem Two&lt;/h2&gt;

&lt;p&gt;Given an array with start time of each task and another array represent the executing time of each task. Process these task by the principle that the shortest job should always run firstly. Write a function to achieve that.&lt;/p&gt;

&lt;h2 id=&#34;solution-shortest-job-first:fd5fbfca02af2e560dbb93ca15b4bf95&#34;&gt;Solution #Shortest Job First&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public double robinRound(int[] arrTime, int[] exeTime, int q) {
		if(arrTime == null || exeTime == null || arrTime.length == 0 || exeTime.length == 0)
			return 0;
		PriorityQueue&amp;lt;Process&amp;gt; queue = new PriorityQueue&amp;lt;&amp;gt;(new Comparator&amp;lt;Process&amp;gt;(){
			@Override
			public int compare(Process p1, Process p2) {
				if (p1.exeTime == p2.exeTime)
					return p1.arrTime - p2.arrTime;
				return Integer.compare(p1.exeTime, p2.exeTime);
			}
		});
		int idx = 0, waitTime = 0, curTime = 0;
		while(idx &amp;lt; arrTime.length || !queue.isEmpty()) {
			if(queue.isEmpty()) {
				queue.offer(new Process(arrTime[idx], exeTime[idx]));
				curTime = arrTime[idx++];
			}else{
				Process curProcess = queue.poll();
				waitTime += (curTime - curProcess.arrTime);
				curTime += curProcess.exeTime;
				// push those process which has arrival time less than current time
				while(idx &amp;lt; arrTime.length &amp;amp;&amp;amp; arrTime[idx] &amp;lt;= curTime) {
					queue.offer(new Process(arrTime[idx], exeTime[idx++]));
				}
			}
		}
		return (double) waitTime / (double) arrTime.length;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rotate Matrix</title>
      <link>http://xmruibi.github.io/2015/11/18/rotate-matrix/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/rotate-matrix/</guid>
      <description>

&lt;p&gt;Given A Matrix and rotate by input flag represent the direction of rotation.&lt;/p&gt;

&lt;h2 id=&#34;solution:18934d05988ea6297312db56d76fae0e&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int[][] rotateMatrix(int[][] matrix, boolean flag) {
		int n = matrix.length - 1;
		// in-place solution
		for (int i = 0; i &amp;lt; n; i++) {
			for (int j = i; j &amp;lt; n - i; j++) {
			// do it in 1/4 area of matrix
				int temp;
				if(flag) {
					temp = matrix[j][n - i];
					matrix[j][n - i] = matrix[i][j];
					matrix[i][j] = matrix[n - j][i];
					matrix[n - j][i] = matrix[n - i][n - j];
					matrix[n - i][n - j] = temp;
				}else{
					temp = matrix[n - i][n - j];
					matrix[n - i][n - j] = matrix[n - j][i];
					matrix[n - j][i] = matrix[i][j];
					matrix[i][j] = matrix[j][n - i];
					matrix[j][n - i] = temp;
				}
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Two Sum Count</title>
      <link>http://xmruibi.github.io/2015/11/18/two-sum-count/</link>
      <pubDate>Wed, 18 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/two-sum-count/</guid>
      <description>

&lt;p&gt;Given an array and a target number, count how many pair in this array can sum to that target number.&lt;/p&gt;

&lt;h2 id=&#34;solution:4e4f31a8a2c131093d3fe5e1265a3ff0&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int countTwoSum(int[] arr, int tar) {
		if(arr == null || arr.length == 0)
			return 0;
		int cnt = 0;
		// store all number in this array
		HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
		for(int i = 0; i &amp;lt; arr.length; i++) {
			// if any number hit in hashset, that means a pair can sum to the target number
			if(set.contains(tar - arr[i]))
				cnt ++;
			set.add(arr[i]);
		}
		return cnt;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-if-input-integers-has-duplicate:4e4f31a8a2c131093d3fe5e1265a3ff0&#34;&gt;Solution #If input integers has duplicate&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution {
    public static int TwoSumCount(int[] nums, int target) {
        if (nums == null || nums.length &amp;lt; 2)    return 0;
        Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;Integer, Integer&amp;gt;();
        int count = 0;
        for (int i = 0; i &amp;lt; nums.length; i++) {
            if (map.containsKey(target - nums[i]))
                count += map.get(target - nums[i]);
            map.put(nums[i], map.containsKey(nums[i]) ? map.get(nums[i]) + 1 : 1);
        }
        return count;
    }
    
    public static void main(String[] args) {
        int rvalue = TwoSumCount(new int[] {1, 1, 2, 3, 4}, 5);
        System.out.println(rvalue);
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Windows Sum</title>
      <link>http://xmruibi.github.io/2015/11/18/windows-sum/</link>
      <pubDate>Wed, 18 Nov 2015 11:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/18/windows-sum/</guid>
      <description>

&lt;p&gt;Given a list of integers and a window size, return a new list of integers where each integer is the sum of all integers in the kth window of of input list. The kth window of the input list is the integers from index k to index k + windows size - 1 (inclusive).&lt;/p&gt;

&lt;h3 id=&#34;example:b84ce37fe94a053117e09329c00c66e3&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[4, 2, 73, 11, -5]&lt;/code&gt; and windows size &lt;code&gt;2&lt;/code&gt; should return &lt;code&gt;[6, 75, 84, 6]&lt;/code&gt;, if windows size &lt;code&gt;3&lt;/code&gt; should return &lt;code&gt;[79, 86, 79]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;solution-array-version:b84ce37fe94a053117e09329c00c66e3&#34;&gt;Solution #Array Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int[] windowsSum(int[] arr, int wSize) {
		int[] res = new int[arr.length - wSize + 1];
		int curSum = 0;
		int idx = 0;
		int resIdx = 0;
		while(idx &amp;lt; arr.length) {
			curSum += arr[idx];
			if(idx &amp;gt;= wSize - 1) {
				res[resIdx++] = curSum;
				curSum -= arr[idx - wSize + 1];
			}
			idx++;
		}
		return res;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-arraylist-version:b84ce37fe94a053117e09329c00c66e3&#34;&gt;Solution #ArrayList Version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public List&amp;lt;Integer&amp;gt; windowsSum(List&amp;lt;Integer&amp;gt; arr, int wSize) {
		List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();b
		// be careful to return new initilized array list instead of return null
		if(arr == null || arr.size() == 0)
			return res; 
		int curSum = 0;
		int idx = 0;
		int resIdx = 0;
		while(idx &amp;lt; arr.size()) {
			curSum += arr.get(idx);
			if(idx &amp;gt;= wSize - 1) {
				res.add(curSum);
				curSum -= arr.get(idx - wSize + 1);
			}
			idx++;
		}
		return res;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Max Points on a Line</title>
      <link>http://xmruibi.github.io/2015/11/15/max-points-on-a-line/</link>
      <pubDate>Sun, 15 Nov 2015 12:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/15/max-points-on-a-line/</guid>
      <description>

&lt;p&gt;Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.&lt;/p&gt;

&lt;h2 id=&#34;think:0468874f3f0719bf48609e7d9f0fd5fc&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Represent line by ratio. Compare point to point by a nested two loop.&lt;/li&gt;
&lt;li&gt;Think about four cases:

&lt;ul&gt;
&lt;li&gt;Same point, count the same point amount&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; axis are the same&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; axis are the same&lt;/li&gt;
&lt;li&gt;normal case &lt;code&gt;(y1 - y2)/(x1 - x2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution:0468874f3f0719bf48609e7d9f0fd5fc&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MaxPointOnAline {

    public int getMaxLine(List&amp;lt;FloatPoint&amp;gt; points) {
        if (points == null || points.size() == 0)
            return 0;

        int max = 0;
        for (int i = 0; i &amp;lt; points.size(); i++) {
            FloatPoint cur = points.get(i);
            Map&amp;lt;Double, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
            int same = 0, localMax = 1;
            for (int j = i + 1; j &amp;lt; points.size(); j++) {
                FloatPoint tar = points.get(j);
                if (cur.x == tar.x &amp;amp;&amp;amp; cur.y == tar.y) {
                    same++;
                }else if (cur.x == tar.x) {
                    double maxr = Double.MAX_VALUE;
                    map.put(maxr, map.containsKey(maxr) ? map.get(maxr) + 1 : 2);
                } else if (cur.y == tar.y) {
                    map.put(0.0, map.containsKey(0.0) ? map.get(0.0) + 1 : 2);
                } else {
                    double ratio = (cur.y - tar.y) / (cur.x - tar.x);
                    map.put(ratio, map.containsKey(ratio) ? map.get(ratio) + 1
                            : 2);
                }
            }
            for (Map.Entry&amp;lt;Double, Integer&amp;gt; entry : map.entrySet())
                localMax = Math.max(localMax, entry.getValue());
            max = Math.max(localMax + same, max);
        }
        return max;
    }
}

class FloatPoint {
    float x, y; // float may not suitable for accurate computation

    public FloatPoint(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Max Stack</title>
      <link>http://xmruibi.github.io/2015/11/15/max-stack/</link>
      <pubDate>Sun, 15 Nov 2015 10:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/15/max-stack/</guid>
      <description>

&lt;p&gt;Design a stack, which makes the following function, try to reduce the time compaxity less than &lt;code&gt;O(n)&lt;/code&gt;
- &lt;code&gt;pop()&lt;/code&gt; pop the top of stack
- &lt;code&gt;push()&lt;/code&gt; push a element into stack
- &lt;code&gt;peek()&lt;/code&gt; peek the top of stack
- &lt;code&gt;peekMax()&lt;/code&gt; peek the max element of stack
- &lt;code&gt;popMax()&lt;/code&gt; pop the max element of stack&lt;/p&gt;

&lt;h2 id=&#34;think:0c76a512774b6e4792fd578d8968c8bd&#34;&gt;Think&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Typically, we can think about using one stacks and one heap. One of value, one of tracking the max stack.&lt;/li&gt;
&lt;li&gt;The most tricky part is pop max function. Make the node removal in O(n) should use the doubly linked list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution:0c76a512774b6e4792fd578d8968c8bd&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MaxStack {
    Stack elem = new Stack();
    PriorityQueue&amp;lt;ListNode&amp;gt; heap = new PriorityQueue&amp;lt;ListNode&amp;gt;((o1,o2) -&amp;gt; Integer.compare(o2.val, o1.val));
    
    // take O(logn): the depth of heap tree 
    public void push(int val) {
        ListNode newnode = new ListNode(val);
        heap.add(newnode); 
        elem.push(newnode);
    }
    
    // take O(logn): the depth of heap tree 
    public void pop() {
        ListNode remove = elem.pop();
        heap.remove(remove); 
    }
    
    // O(1) time
    public int peek() {
        return elem.peek().val;
    }

    // O(1) time
    public int peekMax() {
        return heap.peek().val; 
    }

    // take O(logn): the depth of heap tree 
    public void popMax() {
        ListNode node = heap.poll(); 
        elem.remove(node);
    }

    public static void main(String[] args) {
        MaxStack ms = new MaxStack();
        ms.push(1);
        ms.push(3);
        ms.push(2);
        System.out.println(ms.peekMax()); // == 3
        ms.popMax();
        System.out.println(ms.peekMax()); // == 2
        ms.push(4);
        ms.push(8);
        ms.pop();
        System.out.println(ms.peekMax()); // == 4
    }
}

class Stack {
    ListNode head, rear;

    public Stack() {
        head = new ListNode(0);
        rear = new ListNode(0);
        head.next = rear;
        rear.prev = head;
    }

    public void push(ListNode newnode) {
        rear.prev.next = newnode;
        newnode.prev = rear.prev;
        newnode.next = rear;
        rear.prev = newnode;
    }

    public ListNode pop() {
        if (isEmpty())
            return null;
        ListNode remove = rear.prev;
        rear.prev = remove.prev;
        remove.prev.next = rear;
        return remove;
    }

    public ListNode peek() {
        if (isEmpty())
            return null;
        ListNode peek = rear.prev;
        return peek;
    }

    public void remove(ListNode node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    public boolean isEmpty() {
        return head.next == rear;
    }
}

class ListNode {
    int val;
    ListNode prev, next;

    public ListNode(int val) {
        this.val = val;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Balanced Point in Array</title>
      <link>http://xmruibi.github.io/2015/11/14/balanced-point-in-array/</link>
      <pubDate>Sat, 14 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/14/balanced-point-in-array/</guid>
      <description>

&lt;p&gt;Balanced index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes.&lt;/p&gt;

&lt;h3 id=&#34;example:4e2c86d4518587f1b252aab20ac5c10d&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;In an arrya A:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A[0] = -7, A[1] = 1, A[2] = 5, A[3] = 2, A[4] = -4, A[5] = 3, A[6]=0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;3&lt;/code&gt; is an Balanced index, because: &lt;code&gt;A[0] + A[1] + A[2] = A[4] + A[5] + A[6]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;6&lt;/code&gt; is also an Balanced index, because sum of zero elements is zero, i.e., &lt;code&gt;A[0] + A[1] + A[2] + A[3] + A[4] + A[5]=0&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;7&lt;/code&gt; is not an Balanced index, because it is not a valid index of array A.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write a function int &lt;code&gt;balancedPoint(int[] arr)&lt;/code&gt;; that given a sequence arr[] of size n, returns an Balanced index (if any) or -1 if no Balanced indexes exist.&lt;/p&gt;

&lt;h2 id=&#34;think:4e2c86d4518587f1b252aab20ac5c10d&#34;&gt;Think&lt;/h2&gt;

&lt;p&gt;The idea is to get total sum of array first. Then Iterate through the array and keep updating the left sum which is initialized as zero. In the loop, we can get right sum by subtracting the elements one by one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) Initialize leftsum  as 0
2) Get the total sum of the array as sum
3) Iterate through the array and for each index i, do following.
    a)  Update sum to get the right sum.  
           sum = sum - arr[i] 
       // sum is now right sum
    b) If leftsum is equal to sum, then return current index. 
    c) leftsum = leftsum + arr[i] // update leftsum for next iteration.
4) return -1 // If we come out of loop without returning then
             // there is no equilibrium index
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:4e2c86d4518587f1b252aab20ac5c10d&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	// find all balance point in an array return balanced index
	public List&amp;lt;Integer&amp;gt; findBalancedPoint(int[] arr) {
		int leftsum = 0, rightsum = 0;
		List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

		for (int i = 0; i &amp;lt; arr.length; i++) 
			leftsum += arr[i];
		
		for (int i = arr.length - 1; i&amp;gt;=0; i--) {
			leftsum -= arr[i];
			if(leftsum == rightsum)
				res.add(i);
			rightsum+=arr[i];
		}
		return -1;
	}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Maximum Subarray of Sum / Product</title>
      <link>http://xmruibi.github.io/2015/11/14/maximum-subarray-of-sum-/-product/</link>
      <pubDate>Sat, 14 Nov 2015 22:43:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/14/maximum-subarray-of-sum-/-product/</guid>
      <description>

&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;

&lt;p&gt;For example, given the array &lt;code&gt;[−2,1,−3,4,−1,2,1,−5,4]&lt;/code&gt;,
the contiguous subarray &lt;code&gt;[4,−1,2,1]&lt;/code&gt; has the largest sum = &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solution:f78387a942b57f331cbfb70191f2872a&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int maxSubArray(int[] arr) {
        int maxSum = Integer.MIN_VALUE;
		int curSum = 0;
		for (int i = 0; i &amp;lt; arr.length; i++) {
			curSum += arr[i];
			maxSum = Math.max(maxSum, curSum);
			if (curSum &amp;lt; 0)
				curSum = 0;
		}
		return maxSum;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-record-index:f78387a942b57f331cbfb70191f2872a&#34;&gt;Solution #Record Index&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int[] maxSubArray(int[] arr) {
        int maxSum = Integer.MIN_VALUE;
		int curSum = 0;
		int prev = 0, l = 0, r = 0;
		for (int i = 0; i &amp;lt; arr.length; i++) {
			curSum += arr[i];
			if(curSum &amp;gt; maxSum) {
				maxSum = curSum;
				l = prev;
				r = i;
			}
			if (curSum &amp;lt; 0) {
				curSum = 0;
				prev = i + 1;
			}
		}
		return new int[]{l, r};
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest product.&lt;/p&gt;

&lt;p&gt;For example, given the array &lt;code&gt;[2,3,-2,4]&lt;/code&gt;,
the contiguous subarray &lt;code&gt;[2,3]&lt;/code&gt; has the largest product = &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solution-1:f78387a942b57f331cbfb70191f2872a&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public int maxProduct(int[] nums) {
        int glMax = Integer.MIN_VALUE;
        
        int localMin = 1; // record the current max
        int localMax = 1; // record the current min, since the negative number multiply with current number may leads to next product as the positive max
        for(int i = 0; i &amp;lt; nums.length; i++) {
            int tmp = localMax;
            localMax = Math.max(localMax*nums[i], Math.max(localMin*nums[i], nums[i]));
            localMin = Math.min(tmp*nums[i], Math.min(localMin*nums[i], nums[i]));
            glMax = Math.max(glMax, localMax);
        }
        
        return glMax;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>