<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rui&#39;s Site</title>
    <link>http://xmruibi.github.io/</link>
    <description>Recent content on Rui&#39;s Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Oct 2015 22:10:29 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Set Matrix Zeroes</title>
      <link>http://xmruibi.github.io/post/algorithms/SetZeroes/</link>
      <pubDate>Sun, 11 Oct 2015 22:10:29 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/SetZeroes/</guid>
      <description>

&lt;p&gt;Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.&lt;/p&gt;

&lt;h4 id=&#34;solution:35c33b873bff4238525fcbe7737590f0&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use the first row (up row) and the first col (left col) to record the position info of zeroes in matrix;&lt;/li&gt;
&lt;li&gt;But we also need to set two boolean value to check if there is zero in first row and first col;&lt;/li&gt;
&lt;li&gt;Then go through the matrix again, when [i][0] is marked zero or [0][j] is marked zero set current position as zero! This is important!;&lt;/li&gt;
&lt;li&gt;Finally, go back to check two boolean value, and set that row or col as zero if boolean value is true;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @return: Void
     */
    public void setZeroes(int[][] matrix) {

        if(matrix == null || matrix.length == 0)
            return;
        
        boolean row = false;
        boolean col = false;
                        
        for(int i = 0; i &lt; matrix.length; i++)
            if(matrix[i][0] == 0)
                col = true;
                
        for(int j = 0; j &lt; matrix[0].length; j++)
            if(matrix[0][j] == 0)
                row = true;
        
        for(int i = 1; i &lt; matrix.length; i++)
            for(int j = 1; j &lt; matrix[i].length; j++) 
                if(matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
                
        for(int i = 1; i &lt; matrix.length; i++){ 
            for(int j = 1; j &lt; matrix[0].length; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0)
                    matrix[i][j] = 0;
            }   
        }
        
        if(row)
            for(int j = 0; j &lt; matrix[0].length; j++)
                    matrix[0][j] = 0;
                    
        if(col)
            for(int i = 0; i &lt; matrix.length; i++)
                    matrix[i][0] = 0;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>FastPower</title>
      <link>http://xmruibi.github.io/post/algorithms/FastPower/</link>
      <pubDate>Sun, 11 Oct 2015 19:06:42 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/FastPower/</guid>
      <description>

&lt;p&gt;Calculate the an % b where a, b and n are all 32bit integers.&lt;/p&gt;

&lt;p&gt;*Example: *
 For 231 % 3 = 2
 For 1001000 % 1000 = 0&lt;/p&gt;

&lt;p&gt;*Challenge: *
 O(logn)&lt;/p&gt;

&lt;h4 id=&#34;solution:4da23984a7a1d0b767388d3ebb05f9c0&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Divide and Conquer&lt;/li&gt;
&lt;li&gt;Think about the two basic condition: n is 1 and n is 0;&lt;/li&gt;
&lt;li&gt;Each time we divide the n into two part (n/2);&lt;/li&gt;
&lt;li&gt;Then we got the combine value (divide * divide) from both parts (they&amp;rsquo;re eqaul, actually);&lt;/li&gt;
&lt;li&gt;While n is odd, we need to add one more &amp;ldquo;a&amp;rdquo; time (*a);&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
class Solution {
    /*
     * @param a, b, n: 32bit integers
     * @return: An integer
     */
    public int fastPower(int a, int b, int n) {

        if(n == 1)
            return a % b;
        
        if(n == 0)
            return 1 % b;
        
        long divide = fastPower(a, b, n/2);
        long combine = divide * divide;
        combine %= b;
        if(n % 2 == 1)
            combine *= (long)a;
        combine %= b;
        return (int)combine;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>RotateImage</title>
      <link>http://xmruibi.github.io/post/algorithms/RotateImage/</link>
      <pubDate>Sun, 11 Oct 2015 16:06:19 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/RotateImage/</guid>
      <description>

&lt;p&gt;You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise).&lt;/p&gt;

&lt;h4 id=&#34;solution:16166296d29f61e468857c0d8a3fcbcc&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Headache Implement question!&lt;/li&gt;
&lt;li&gt;Very carefully to treat index.&lt;/li&gt;
&lt;li&gt;Only calculate the &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt; of index in matrix!&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @return: Void
     */
    public void rotate(int[][] matrix) {
        
        int n = matrix.length;

        // One of i or j need to consider boundry!
        for(int i = 0; i &lt; ( n &gt;&gt; 1); i ++) {
        // that&#39;s why j &lt; (n+1) / 2, that is the boundry!
            for(int j = 0; j &lt; ( n+1 &gt;&gt; 1); j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Route Between Two Nodes in Directed Graph</title>
      <link>http://xmruibi.github.io/post/algorithms/RouteBetweenDirectedGraph/</link>
      <pubDate>Sun, 11 Oct 2015 15:14:18 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/RouteBetweenDirectedGraph/</guid>
      <description>

&lt;p&gt;Given a directed graph, design an algorithm to find out whether there is a route between two nodes.&lt;/p&gt;

&lt;h4 id=&#34;solution:8b5cccba779597a5ebdb3da6cea8fb3e&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Most typical Graph algorithm question!&lt;/li&gt;
&lt;li&gt;Try two ways: DFS, BFS.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
   /**
     * @param graph: A list of Directed graph node
     * @param s: the starting Directed graph node
     * @param t: the terminal Directed graph node
     * @return: a boolean value
     */
     
     // BFS
     public boolean hasRoute(ArrayList&lt;DirectedGraphNode&gt; graph, 
                            DirectedGraphNode s, DirectedGraphNode t) {
        
        if(s == t)
            return true;

        Queue&lt;DirectedGraphNode&gt; queue = new LinkedList&lt;&gt;();
        queue.offer(s);
        graph.remove(s);
        while(!queue.isEmpty()) {
            DirectedGraphNode cur = queue.remove();
            graph.remove(cur);
            for(DirectedGraphNode next : cur.neighbors) {
                if(!graph.contains(next))
                    continue;
                if(next == t)
                    return true;
                queue.offer(next);
            }
        }
        return false;
    }
     
     
    // DFS
    public boolean hasRoute(ArrayList&lt;DirectedGraphNode&gt; graph, 
                            DirectedGraphNode s, DirectedGraphNode t) {
        // write your code here
        if(s == t)
            return true;
            
        graph.remove(s);
        for(DirectedGraphNode next : s.neighbors) {
            if(!graph.contains(next))
                    continue;
            if(hasRoute(graph, next, t))
                return true;
        }
        graph.add(s);
        return false;
    }
}


&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SearchIn2DMatrixI</title>
      <link>http://xmruibi.github.io/post/algorithms/SearchIn2DMatrixI/</link>
      <pubDate>Sun, 11 Oct 2015 13:37:08 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/SearchIn2DMatrixI/</guid>
      <description>

&lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix.&lt;/p&gt;

&lt;p&gt;This matrix has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integers in each row are sorted from left to right.&lt;/li&gt;
&lt;li&gt;The first integer of each row is greater than the last integer of the previous row.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution:f10b94d913674fb49b94f61e480eb3d9&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;First binary search with checking the first element in each row so that we can find the row may contain the target number;&lt;/li&gt;
&lt;li&gt;So we search the lowbound of target number. However, we also can do if the element is just equals to target number then directly return for reducing time.&lt;/li&gt;
&lt;li&gt;Once we get the target row, then we do the second binary search in this row to find the target number.&lt;/li&gt;
&lt;li&gt;All in all, two binary search to find the target!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0)
            return false;
        
        int up = 0, down = matrix.length - 1;
        while(up &lt; down - 1) {
            int mrow = up + ((down - up) &gt;&gt; 1);
            if(matrix[mrow][0] == target)
                return true;
            if(matrix[mrow][0] &lt; target)
                up = mrow;
            else
                down = mrow;
        }
        int curRow;
        if(matrix[up][0] &gt; target)
            return false;
        else if(matrix[up][0] &lt;= target &amp;&amp; matrix[down][0] &gt; target)
            curRow = up;
        else
            curRow = down;
        
        int l = 0, r = matrix[curRow].length - 1;
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt; 1);
            if(matrix[curRow][m] == target)
                return true;
            else if(matrix[curRow][m] &lt; target)
                l = m;
            else
                r = m;
        }
        
        if(matrix[curRow][l] == target || matrix[curRow][r] == target)
            return true;
        else
            return false;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search In 2D Matrix II</title>
      <link>http://xmruibi.github.io/post/algorithms/SearchIn2DMatrixII/</link>
      <pubDate>Sun, 11 Oct 2015 13:35:30 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/SearchIn2DMatrixII/</guid>
      <description>

&lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.&lt;/p&gt;

&lt;p&gt;This matrix has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Integers in each row are sorted from left to right.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integers in each column are sorted from up to bottom.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No duplicate integers in each row or column.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution:a5bec991679a7402cddd3c1b4b2198ca&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Typical Matrix Search Problem, using a condition for driven coordinate moving.&lt;/li&gt;
&lt;li&gt;Here the value and target comparasion is the driven condition.&lt;/li&gt;
&lt;li&gt;Since the sorted matrix, we can start from right top element.&lt;/li&gt;
&lt;li&gt;Because on the diagonal from right top to left down, all the left elements are less than the right elments.&lt;/li&gt;
&lt;li&gt;So we have three type of running condition and set the x, y coordinate differently.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param: A number you want to search in the matrix
     * @return: An integer indicate the occurrence of target in the given matrix
     */

    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0)
            return 0;
        int rightTop = matrix[0][matrix[0].length - 1];
        int x = 0, y = matrix[0].length - 1;
        int occ = 0;
        while(x &lt; matrix.length &amp;&amp; y &gt;= 0) {
            int cur = matrix[x][y];
            if(cur == target) {
                occ ++;
                x++; y--;
            }else if(cur &lt; target)
                x++;
            else
                y--;
        }       
        return occ;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum I</title>
      <link>http://xmruibi.github.io/post/algorithms/SubarraySumI/</link>
      <pubDate>Fri, 09 Oct 2015 10:40:49 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/SubarraySumI/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public ArrayList&lt;Integer&gt; subarraySum(int[] nums) {
        // write your code here
        ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
        if(nums == null || nums.length == 0)
            return res;       
        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer&gt;();
        int sum = 0;
        map.put(0, 0);
        for(int i = 0; i &lt; nums.length; i++) {
            if(map.containsKey(sum+nums[i])) {
                res.add(map.get(sum+nums[i]));
                res.add(i);
                return res;
            }
            map.put(sum+=nums[i], i+1);
        }
        return res;
    }
}   

&lt;/code&gt;

&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum II</title>
      <link>http://xmruibi.github.io/post/algorithms/SubarraySumII/</link>
      <pubDate>Thu, 08 Oct 2015 21:18:09 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/algorithms/SubarraySumII/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is between two given interval. Your code should return the number of possible answer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public int subarraySumII(int[] A, int start, int end) {
    int res = 0;
        for(int i = 1; i &lt; A.length; i++)
            A[i] += A[i - 1];
        
        Arrays.sort(A);
        for(int i = 0; i &lt; A.length; i++) {
            if(A[i] &gt;= start &amp;&amp; A[i] &lt;= end)
                res++;
            // start &lt;= A[i] - A[j] &lt;= end
            // so the max bound and min bound of A[j] are following:
            int max = A[i] - start;
            int min = A[i] - end;
            // max + 1 make sure the right bound of max value and also index problem
            int range = findInsPos(A, max + 1) - findInsPos(A, min);
            res += range;
        }
        return res;
}
private int findInsPos(int[] A, int value) {
        int l = 0, r = A.length - 1;
        
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt;1);
            if(A[m] &lt; value)
                l = m;
            else
                r = m;
        }
        if(A[l] &gt;= value)
            return l;
        else
            return r;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Long Journey Across United States</title>
      <link>http://xmruibi.github.io/life/LongJourneyAcrossAmerican/</link>
      <pubDate>Wed, 02 Sep 2015 10:42:11 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/life/LongJourneyAcrossAmerican/</guid>
      <description>

&lt;p&gt;Six days, from Pennsylvania to California! Had been driving for 50 hours on the road and 4990 kilometer!&lt;/p&gt;

&lt;p&gt;Great road trip! Love it! Crossed 11 states in American.&lt;/p&gt;

&lt;h3 id=&#34;aug-27th:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Aug 27th&lt;/h3&gt;

&lt;h4 id=&#34;pittsburgh-pa-chicago-il:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Pittsburgh,PA - Chicago, IL&lt;/h4&gt;

&lt;p&gt;Start from my american home town Pittsburgh! Say good bye, but really miss you!&lt;/p&gt;

&lt;p&gt;Through Ohio, Indina, then Illinois. All the way is Toll way in first day trip!&lt;/p&gt;

&lt;h3 id=&#34;aug-28th:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Aug 28th&lt;/h3&gt;

&lt;h4 id=&#34;chicago-il-omaha-ne:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Chicago,IL - Omaha, NE&lt;/h4&gt;

&lt;p&gt;Passed Iowa, acrossed Mississippi.&lt;/p&gt;

&lt;p&gt;Huge corn field all the way! Typical great plain scene!
&lt;img src=&#34;media/Journey/IMG_4353.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;aug-29th:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Aug 29th&lt;/h3&gt;

&lt;h4 id=&#34;omaha-ne-danver-co:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Omaha, NE - Danver, CO&lt;/h4&gt;

&lt;p&gt;Farms and Corns in Omaha, then the Colorado&amp;rsquo;s desert.&lt;/p&gt;

&lt;p&gt;Rocky Mountain National Park!! 4000 kilometer above sea level! Gorgeous view, like Xinjiang Uygur Autonomous Regin and Tibet in China.
&lt;img src=&#34;media/Journey/IMG_4388.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;media/Journey/IMG_4400.jpg&#34; alt=&#34;&#34;&gt;
&lt;img src=&#34;media/Journey/IMG_4426.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The highest road in United States.
&lt;img src=&#34;media/Journey/IMG_4445.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;aug-30th:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Aug 30th&lt;/h3&gt;

&lt;h4 id=&#34;danver-co-salt-lake-city-ut:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Danver, CO - Salt Lake City, UT&lt;/h4&gt;

&lt;p&gt;Lonely Gas Staion in Wyoming
&lt;img src=&#34;media/Journey/IMG_4470.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Storm on the way!
&lt;img src=&#34;media/Journey/IMG_4496.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Hello Utah! Red Rock! The location is near the welcome center in Utah
&lt;img src=&#34;media/Journey/IMG_4497.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;aug-31st:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Aug 31st&lt;/h3&gt;

&lt;h4 id=&#34;salt-lake-city-ut-reno-nv:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Salt Lake City, UT - Reno, NV&lt;/h4&gt;

&lt;p&gt;Great Salt Plain! Never seen the view like this. Huge White Salt plat stretches continuously for nearly 100 kilometer!
&lt;img src=&#34;media/Journey/IMG_4571.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Desert in Nevada
&lt;img src=&#34;media/Journey/IMG_4576.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;sept-1st:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Sept 1st,&lt;/h3&gt;

&lt;h4 id=&#34;reno-nv-san-francisco-ca:afecfa315ebe66b45c929f8e5019c956&#34;&gt;Reno, NV - San Francisco, CA&lt;/h4&gt;

&lt;p&gt;Tahoe Lake!
&lt;img src=&#34;media/Journey/IMG_4591.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Algorithm Questions Conclusion</title>
      <link>http://xmruibi.github.io/post/conclusion/Algorithm%20Conclusion/</link>
      <pubDate>Tue, 11 Aug 2015 00:04:29 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/post/conclusion/Algorithm%20Conclusion/</guid>
      <description>

&lt;h4 id=&#34;preface:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Preface:&lt;/h4&gt;

&lt;p&gt;This is the collection of interview questions concluded by me, which is including questions from LeetCode, Cracking Code Interview, and Handwriting Coding Handbook.&lt;/p&gt;

&lt;h2 id=&#34;main:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Main:&lt;/h2&gt;

&lt;h3 id=&#34;1-basic-algorithm-part:141dddc0e7000fb9b7281baa319a476c&#34;&gt;1. Basic Algorithm Part:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linked List Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71287&#34;&gt;https://www.zybuluo.com/xmruibi/note/71287&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stack &amp;amp; Queue Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71283&#34;&gt;https://www.zybuluo.com/xmruibi/note/71283&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Binary Tree Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/56634&#34;&gt;https://www.zybuluo.com/xmruibi/note/56634&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mathematical Problem Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71211&#34;&gt;https://www.zybuluo.com/xmruibi/note/71211&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Big Number Problem Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71208&#34;&gt;https://www.zybuluo.com/xmruibi/note/71208&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-data-structure:141dddc0e7000fb9b7281baa319a476c&#34;&gt;2. Data Structure:&lt;/h3&gt;

&lt;h4 id=&#34;java-collection-summary:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Java Collection Summary&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Abstract Collection
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71477&#34;&gt;https://www.zybuluo.com/xmruibi/note/71477&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;list:141dddc0e7000fb9b7281baa319a476c&#34;&gt;- List&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;List Interface &amp;amp; Abstract List &amp;amp; Abstract Sequential List
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71582&#34;&gt;https://www.zybuluo.com/xmruibi/note/71582&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ArrayList
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71425&#34;&gt;https://www.zybuluo.com/xmruibi/note/71425&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;set:141dddc0e7000fb9b7281baa319a476c&#34;&gt;- Set&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Set &amp;amp; Abstract Set
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71585&#34;&gt;https://www.zybuluo.com/xmruibi/note/71585&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;map:141dddc0e7000fb9b7281baa319a476c&#34;&gt;- Map&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Map &amp;amp; Abstract Map
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71595&#34;&gt;https://www.zybuluo.com/xmruibi/note/71595&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HashMap
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71622&#34;&gt;https://www.zybuluo.com/xmruibi/note/71622&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;graph:141dddc0e7000fb9b7281baa319a476c&#34;&gt;- Graph&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Undirected Graph&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Directed Graph&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-algorithm-thinking:141dddc0e7000fb9b7281baa319a476c&#34;&gt;3 Algorithm Thinking&lt;/h3&gt;

&lt;h4 id=&#34;sort:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Sort&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Comparsion Sort Problems Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71280&#34;&gt;https://www.zybuluo.com/xmruibi/note/71280&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linear Sort Solutions Summary:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Big Data Sort Solutions Summary:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;search:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Search&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Binary Search Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71214&#34;&gt;https://www.zybuluo.com/xmruibi/note/71214&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;dfs-and-bfs:141dddc0e7000fb9b7281baa319a476c&#34;&gt;DFS AND BFS&lt;/h4&gt;

&lt;h4 id=&#34;divide-and-conquer:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Divide and Conquer&lt;/h4&gt;

&lt;h4 id=&#34;dynamic-programming:141dddc0e7000fb9b7281baa319a476c&#34;&gt;Dynamic Programming&lt;/h4&gt;

&lt;h3 id=&#34;4-misc:141dddc0e7000fb9b7281baa319a476c&#34;&gt;4 Misc.&lt;/h3&gt;

&lt;h3 id=&#34;5-java-techs:141dddc0e7000fb9b7281baa319a476c&#34;&gt;5 Java Techs&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Distributed MongoDB Configuration</title>
      <link>http://xmruibi.github.io/project/DistributedMongoDB/</link>
      <pubDate>Tue, 10 Mar 2015 22:56:15 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/project/DistributedMongoDB/</guid>
      <description>

&lt;h3 id=&#34;this-project-has-using-distributed-sharded-mongodb-as-data-storage-and-hadoop-map-reduce-as-computing-framework:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;This Project has using Distributed Sharded MongoDB as Data Storage and Hadoop Map Reduce as Computing Framework.&lt;/h3&gt;

&lt;h2 id=&#34;sharded-mongodb-configuration:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;Sharded MongoDB Configuration&lt;/h2&gt;

&lt;p&gt;The following graph is the architecture of how I set three VMs with different port to simulate the real sharding pattern(which need 15 machines actually)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;media/Sharded%20MongoDB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The following procedure is how I configured MongoDB on remote three VMs.&lt;/p&gt;

&lt;h3 id=&#34;1-set-up-data-path-config-file-and-log-file-paths-in-each-node-with-mongos-config-shard1-shard2-shard3-directory-name:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;1. Set up data path, config file and log file paths in each node with mongos 、config 、 shard1 、shard2、shard3 (directory name)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /data/mongos/log
sudo chmod -R 777 /data/mongos/log
mkdir -p /data/config/data
sudo chmod -R 777 /data/config/data
mkdir -p /data/config/log
sudo chmod -R 777 /data/config/log
mkdir -p /data/mongos/log
sudo chmod -R 777 /data/mongos/log
mkdir -p /data/shard1/data
sudo chmod -R 777 /data/shard1/data
mkdir -p /data/shard1/log
sudo chmod -R 777 /data/shard1/log
mkdir -p /data/shard2/data
sudo chmod -R 777 /data/shard2/data
mkdir -p /data/shard2/log
sudo chmod -R 777 /data/shard2/log
mkdir -p /data/shard3/data
sudo chmod -R 777 /data/shard3/data
mkdir -p /data/shard3/log
sudo chmod -R 777 /data/shard3/log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-make-a-plan-of-port-number-and-modify-some-config-parameter-in-mongod-conf:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;2. Make a plan of port number and modify some config parameter in mongod.conf&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mongod --configsvr --dbpath /data/config/data --port 27019 --logpath /data/config/log/config.log --fork


mongos  --configdb 45.55.188.234:27019,45.55.186.238:27019,104.131.106.22:27019  --port 27017   --logpath  /data/mongos/log/mongos.log --fork

## or 
## These codes can migration configuration 

rsync -az /data/configdb mongo-config1.example.net:/data/configdb
rsync -az /data/configdb mongo-config2.example.net:/data/configdb

nano etc/mongod.conf

### This is important!!
set bing_ip = 0.0.0.0; for remote login
set default mongod: 27019 
## !Otherwise your mongos port(27017) will be blocked
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-config-sharding-setting-on-each-vm:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;3. Config sharding setting on each VM&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;### set up shards ports and dbpath and log path
mongod --shardsvr --replSet shard1 --port 22001 --dbpath /data/shard1/data  --logpath /data/shard1/log/shard1.log --fork --journal  --oplogSize 10
mongod --shardsvr --replSet shard2 --port 22002 --dbpath /data/shard2/data  --logpath /data/shard2/log/shard2.log --fork --journal  --oplogSize 10
mongod --shardsvr --replSet shard3 --port 22003 --dbpath /data/shard3/data  --logpath /data/shard3/log/shard3.log --fork --journal  --oplogSize 10


# Shard_1 in Node(45.55.188.234)
mongo  127.0.0.1:22001
use admin
config = { _id:&amp;quot;shard1&amp;quot;, members:[
                     {_id:0,host:&amp;quot;45.55.188.234:22001&amp;quot;},
                     {_id:1,host:&amp;quot;45.55.186.238:22001&amp;quot;},
                {_id:2,host:&amp;quot;104.131.106.22:22001&amp;quot;,arbiterOnly:true}
                ]
         }
rs.initiate(config);

# Shard_2 in Node(45.55.186.238)
mongo  127.0.0.1:22002
use admin
config = { _id:&amp;quot;shard2&amp;quot;, members:[
                     {_id:0,host:&amp;quot;45.55.186.238:22002&amp;quot;},
                     {_id:1,host:&amp;quot;104.131.106.22:22002&amp;quot;},
                {_id:2,host:&amp;quot;45.55.188.234:22002&amp;quot;,arbiterOnly:true}
                ]
         }
rs.initiate(config);

# Shard_3 in Node(104.131.106.22)
mongo  127.0.0.1:22003
use admin
config = { _id:&amp;quot;shard3&amp;quot;, members:[
                     {_id:0,host:&amp;quot;104.131.106.22:22003&amp;quot;},
                     {_id:1,host:&amp;quot;45.55.188.234:22003&amp;quot;},
           {_id:2,host:&amp;quot;45.55.186.238:22003&amp;quot;,arbiterOnly:true}
                ]
         }
rs.initiate(config);
## if you need to reconfig, please use Cmd( rs.reconfig(your_para) )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-add-shard-config-just-in-one-of-vms:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;4. Add Shard Config just in one of VMs&lt;/h3&gt;

&lt;p&gt;It seems no master mode concept in MongoDB. So just choose one of it. Config Sharding info in mongos; I also made the sharding part on different machines (e.g. Primary Shard1 on Server One, Primary Shard2 on Server Two).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## no specific addr/port 
mongo
use admin

db.runCommand({addshard : &amp;quot;shard1/45.55.188.234:22001,45.55.186.238:22001,104.131.106.22:22001&amp;quot;});

db.runCommand({addshard: &amp;quot;shard2/45.55.186.238:22002,104.131.106.22:22002,45.55.188.234:22002&amp;quot;});

db.runCommand({addshard : &amp;quot;shard3/104.131.106.22:22003,45.55.188.234:22003,45.55.186.238:22003&amp;quot;});

## if you need to reset your previous setting
## 
db.runCommand( { removeShard: &amp;quot;shard1&amp;quot; } )

#Test:
db.runCommand( { enablesharding :&amp;quot;stock&amp;quot;});
db.runCommand( { shardcollection : &amp;quot;stock.quotes&amp;quot;,key : {&amp;quot;_id&amp;quot;: 1} })

for (var i = 1; i &amp;lt;= 100000; i++) db.table1.save({id:i,&amp;quot;test1&amp;quot;:&amp;quot;testval1&amp;quot;});


use admin
db.addUser(&#39;test&#39;,&#39;test&#39;)
db.auth(&#39;test&#39;,&#39;test&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-some-commmands-for-check-database-status:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;5. Some Commmands for check Database Status;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;db.stats();

show databases

db.dropDatabase()

db.printShardingStatus()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-misc:4aa0a68069c32ae3cd96af8e4943a95f&#34;&gt;6. Misc.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;## Sometimes export jar failed
 zip -d stockCrawler.jar META-INF/LICENSE
 jar tvf stockCrawler.jar | grep -i license
 
 ## HDFS manipulation
 
 hadoop fs -ls
 hadoop fs -mkdir /user/${adminName}   
 hadoop fs -touch test
 hdfs dfs -copyFromLocal ${fileName}
 hdfs dfs -cat ${fileName}
 hadoop fs -rmr output
 hadoop jar stockCrawler.jar
 
 ## Some query example:
 db.quotes.find({&#39;historical_quotes.date&#39;:&#39;2015-04-10&#39;})
 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://xmruibi.github.io/about/</link>
      <pubDate>Wed, 10 Sep 2014 17:22:36 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;rui-bi:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Rui Bi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;2015 University of Pittsburgh, Masters of Information Science&lt;/li&gt;
&lt;li&gt;2013 Tianjin Polytechnic University, Bachelor of Computer Science&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;location-california:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Location: California&lt;/h4&gt;

&lt;h4 id=&#34;seeking-for-software-engineer-position:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Seeking for software engineer position&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>