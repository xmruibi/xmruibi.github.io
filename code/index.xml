<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codes on Coder Thinking -- Home Page</title>
    <link>http://xmruibi.github.io/code/</link>
    <description>Recent content in Codes on Coder Thinking -- Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xmruibi@gmail.com (Rui Bi)</managingEditor>
    <webMaster>xmruibi@gmail.com (Rui Bi)</webMaster>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Mon, 12 Oct 2015 23:33:07 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Distributed MongoDB Configuration</title>
      <link>http://xmruibi.github.io/code/DistributedMongoDB/</link>
      <pubDate>Tue, 10 Mar 2015 22:56:15 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/code/DistributedMongoDB/</guid>
      <description>

&lt;p&gt;How to shard the distributed Mongo DB in remote VMs? Here is what I did during a project using Mongo DB as Database and using Hadoop as computing framework.&lt;/p&gt;

&lt;h2 id=&#34;sharded-mongodb-configuration&#34;&gt;Sharded MongoDB Configuration&lt;/h2&gt;

&lt;p&gt;The following graph is the architecture of how I set three VMs with different port to simulate the real sharding pattern(which need 15 machines actually)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://xmruibi.github.io/media/Sharded%20MongoDB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;The following procedure is how I configured MongoDB on remote three VMs.&lt;/p&gt;

&lt;h3 id=&#34;1-set-up-data-path-config-file-and-log-file-paths-in-each-node-with-mongos-config-shard1-shard2-shard3-directory-name&#34;&gt;1. Set up data path, config file and log file paths in each node with mongos 、config 、 shard1 、shard2、shard3 (directory name)&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /data/mongos/log
sudo chmod -R 777 /data/mongos/log
mkdir -p /data/config/data
sudo chmod -R 777 /data/config/data
mkdir -p /data/config/log
sudo chmod -R 777 /data/config/log
mkdir -p /data/mongos/log
sudo chmod -R 777 /data/mongos/log
mkdir -p /data/shard1/data
sudo chmod -R 777 /data/shard1/data
mkdir -p /data/shard1/log
sudo chmod -R 777 /data/shard1/log
mkdir -p /data/shard2/data
sudo chmod -R 777 /data/shard2/data
mkdir -p /data/shard2/log
sudo chmod -R 777 /data/shard2/log
mkdir -p /data/shard3/data
sudo chmod -R 777 /data/shard3/data
mkdir -p /data/shard3/log
sudo chmod -R 777 /data/shard3/log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-make-a-plan-of-port-number-and-modify-some-config-parameter-in-mongod-conf&#34;&gt;2. Make a plan of port number and modify some config parameter in mongod.conf&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;mongod --configsvr --dbpath /data/config/data --port 27019 --logpath /data/config/log/config.log --fork


mongos  --configdb 45.55.188.234:27019,45.55.186.238:27019,104.131.106.22:27019  --port 27017   --logpath  /data/mongos/log/mongos.log --fork

## or 
## These codes can migration configuration 

rsync -az /data/configdb mongo-config1.example.net:/data/configdb
rsync -az /data/configdb mongo-config2.example.net:/data/configdb

nano etc/mongod.conf

### This is important!!
set bing_ip = 0.0.0.0; for remote login
set default mongod: 27019 
## !Otherwise your mongos port(27017) will be blocked
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-config-sharding-setting-on-each-vm&#34;&gt;3. Config sharding setting on each VM&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;### set up shards ports and dbpath and log path
mongod --shardsvr --replSet shard1 --port 22001 --dbpath /data/shard1/data  --logpath /data/shard1/log/shard1.log --fork --journal  --oplogSize 10
mongod --shardsvr --replSet shard2 --port 22002 --dbpath /data/shard2/data  --logpath /data/shard2/log/shard2.log --fork --journal  --oplogSize 10
mongod --shardsvr --replSet shard3 --port 22003 --dbpath /data/shard3/data  --logpath /data/shard3/log/shard3.log --fork --journal  --oplogSize 10


# Shard_1 in Node(45.55.188.234)
mongo  127.0.0.1:22001
use admin
config = { _id:&amp;quot;shard1&amp;quot;, members:[
                     {_id:0,host:&amp;quot;45.55.188.234:22001&amp;quot;},
                     {_id:1,host:&amp;quot;45.55.186.238:22001&amp;quot;},
                {_id:2,host:&amp;quot;104.131.106.22:22001&amp;quot;,arbiterOnly:true}
                ]
         }
rs.initiate(config);

# Shard_2 in Node(45.55.186.238)
mongo  127.0.0.1:22002
use admin
config = { _id:&amp;quot;shard2&amp;quot;, members:[
                     {_id:0,host:&amp;quot;45.55.186.238:22002&amp;quot;},
                     {_id:1,host:&amp;quot;104.131.106.22:22002&amp;quot;},
                {_id:2,host:&amp;quot;45.55.188.234:22002&amp;quot;,arbiterOnly:true}
                ]
         }
rs.initiate(config);

# Shard_3 in Node(104.131.106.22)
mongo  127.0.0.1:22003
use admin
config = { _id:&amp;quot;shard3&amp;quot;, members:[
                     {_id:0,host:&amp;quot;104.131.106.22:22003&amp;quot;},
                     {_id:1,host:&amp;quot;45.55.188.234:22003&amp;quot;},
           {_id:2,host:&amp;quot;45.55.186.238:22003&amp;quot;,arbiterOnly:true}
                ]
         }
rs.initiate(config);
## if you need to reconfig, please use Cmd( rs.reconfig(your_para) )
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-add-shard-config-just-in-one-of-vms&#34;&gt;4. Add Shard Config just in one of VMs&lt;/h3&gt;

&lt;p&gt;It seems no master mode concept in MongoDB. So just choose one of it. Config Sharding info in mongos; I also made the sharding part on different machines (e.g. Primary Shard1 on Server One, Primary Shard2 on Server Two).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## no specific addr/port 
mongo
use admin

db.runCommand({addshard : &amp;quot;shard1/45.55.188.234:22001,45.55.186.238:22001,104.131.106.22:22001&amp;quot;});

db.runCommand({addshard: &amp;quot;shard2/45.55.186.238:22002,104.131.106.22:22002,45.55.188.234:22002&amp;quot;});

db.runCommand({addshard : &amp;quot;shard3/104.131.106.22:22003,45.55.188.234:22003,45.55.186.238:22003&amp;quot;});

## if you need to reset your previous setting
## 
db.runCommand( { removeShard: &amp;quot;shard1&amp;quot; } )

#Test:
db.runCommand( { enablesharding :&amp;quot;stock&amp;quot;});
db.runCommand( { shardcollection : &amp;quot;stock.quotes&amp;quot;,key : {&amp;quot;_id&amp;quot;: 1} })

for (var i = 1; i &amp;lt;= 100000; i++) db.table1.save({id:i,&amp;quot;test1&amp;quot;:&amp;quot;testval1&amp;quot;});


use admin
db.addUser(&#39;test&#39;,&#39;test&#39;)
db.auth(&#39;test&#39;,&#39;test&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-some-commmands-for-check-database-status&#34;&gt;5. Some Commmands for check Database Status;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;db.stats();

show databases

db.dropDatabase()

db.printShardingStatus()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-misc&#34;&gt;6. Misc.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;## Sometimes export jar failed
 zip -d stockCrawler.jar META-INF/LICENSE
 jar tvf stockCrawler.jar | grep -i license
 
 ## HDFS manipulation
 
 hadoop fs -ls
 hadoop fs -mkdir /user/${adminName}   
 hadoop fs -touch test
 hdfs dfs -copyFromLocal ${fileName}
 hdfs dfs -cat ${fileName}
 hadoop fs -rmr output
 hadoop jar stockCrawler.jar
 
 ## Some query example:
 db.quotes.find({&#39;historical_quotes.date&#39;:&#39;2015-04-10&#39;})
 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to build a Hugo Site like this site?</title>
      <link>http://xmruibi.github.io/code/HugoSiteConstruction/</link>
      <pubDate>Mon, 12 Oct 2015 23:33:07 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/code/HugoSiteConstruction/</guid>
      <description>

&lt;p&gt;This is how I build this site and the instruction for people who wanna use &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; to build static site as Github Personal Page.&lt;/p&gt;

&lt;h2 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, Hugo is a kind of static site generator. Unlike the WordPress, Ghost, or Drupal, static web site doesn&amp;rsquo;t need to generate the page content when it received any request. So that means all pages should be set up once the site is built. Here is one more instruction for &lt;a href=&#34;https://www.udemy.com/build-static-sites-in-seconds-with-hugo/&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-should-you-learn&#34;&gt;What should you learn?&lt;/h2&gt;

&lt;p&gt;Hugo is built by Go language. Why use the Go? Author &lt;a href=&#34;http://spf13.com&#34;&gt;Steve Francia&lt;/a&gt; said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I looked at existing static site generators like Jekyll, Middleman and nanoc. All had complicated dependencies to install and took far longer to render my blog with hundreds of posts than I felt was acceptable. I wanted a framework to be able to get rapid feedback while making changes to the templates, and the 5+-minute render times was just too slow. In general, they were also very blog minded and didn’t have the ability to have different content types and flexible URLs.&lt;/p&gt;

&lt;p&gt;I wanted to develop a fast and full-featured website framework without dependencies. The Go language seemed to have all of the features I needed in a language. I began developing Hugo in Go and fell in love with the language. I hope you will enjoy using (and contributing to) Hugo as much as I have writing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing you must know is MarkDown language, which is for writing your article. Please see the introduction of &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;start-you-hugo-journey&#34;&gt;Start you Hugo journey!&lt;/h2&gt;

&lt;p&gt;Install by &lt;code&gt;brew&lt;/code&gt;! What? You don&amp;rsquo;t know that? Do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check you &lt;code&gt;brew&lt;/code&gt; has updated!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure your &lt;code&gt;brew&lt;/code&gt; has lastest &lt;code&gt;hugo&lt;/code&gt; version&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew info hugo
hugo: stable 0.14 (bottled), HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then start install &lt;code&gt;hugo&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well done! Finished! You&amp;rsquo;ve install Hugo! But&amp;hellip;wait&amp;hellip;How to build a site?&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site yourFolder/siteFileName
$ cd /thatPath

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you&amp;rsquo;ll see the Hugo structure like this!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ▸ archetypes/ 
 ▸ content/
 ▸ layouts/
 ▸ static/
   config.toml

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; that is most important thing! That guides your configuration globally for your site, includes &lt;code&gt;baseurl&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;copyright&lt;/code&gt;&amp;hellip;.&lt;/p&gt;

&lt;p&gt;For other folders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;archetypes：for content type! make your rules for new generate .md content.&lt;/li&gt;
&lt;li&gt;content：for your articles. stores all your articles by using markdown format!&lt;/li&gt;
&lt;li&gt;layouts：for layout pattern. decide how your site showing structure. You can make your html as modules here.&lt;/li&gt;
&lt;li&gt;static：includes css, js, fonts, media.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So easy!&lt;/p&gt;

&lt;p&gt;Make a new article? Try this!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new /post/yourArticle.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That will generate a &lt;code&gt;post&lt;/code&gt; folder in your &lt;code&gt;content&lt;/code&gt; folder and also a &lt;code&gt;yourArticle.md&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;Try do write some thing in your article!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-02-01T18:19:54+08:00&amp;quot;
draft = true
title = &amp;quot;about&amp;quot;

+++

#About Me!

 - experience one
 - experience two
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+++&lt;/code&gt; means the format for &lt;code&gt;.toml&lt;/code&gt; format. You can also use &lt;code&gt;---&lt;/code&gt; for &lt;code&gt;.yaml&lt;/code&gt; format.&lt;/p&gt;

&lt;h2 id=&#34;themes-for-hugo&#34;&gt;Themes for Hugo&lt;/h2&gt;

&lt;p&gt;However, there is nothing can show in your site. Because you don&amp;rsquo;t have the skin of your site! What is skin? That is the themes for Hugo! Theme for Hugo like the website template. That decides what your site look like! Hugo is convenient because your can easily to change your theme for entire site!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make a folder in your site root directory and go inside it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes
$ cd themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used the &lt;code&gt;hyde-y&lt;/code&gt; as my theme. You can download it by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/enten/hyde-y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you&amp;rsquo;ll see a &lt;code&gt;themes/hyde-y&lt;/code&gt; folder, which contains similar structure like your site folder!&lt;/p&gt;

&lt;p&gt;You also can get more themes from &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, you still not have linked your site and this theme! Back to the root path in your site folder, get the &lt;code&gt;config.toml&lt;/code&gt; and add this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Theme to use (located in /themes/THEMENAME/)
theme = &amp;quot;hyde-y&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems everything finished! Let&amp;rsquo;s try it!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open &lt;code&gt;http://localhost:1313&lt;/code&gt;, we will see your site!&lt;/p&gt;

&lt;h2 id=&#34;add-more-function&#34;&gt;Add more function!&lt;/h2&gt;

&lt;h3 id=&#34;comment-for-your-article&#34;&gt;Comment for your article&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; is default supported by Hugo! Did you see that in &lt;code&gt;yourSite/themes/hyde-y/layouts/partials/modules/disqus.html&lt;/code&gt;? That is internal html module for show disqus comment below your article! However, you need to register your Disqus account! And set your disqus short name in your &lt;code&gt;config.toml&lt;/code&gt; file!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Enable Disqus integration
disqusShortname = &amp;quot;yourShortName&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How to get your short name? Go your setting in Disqus profile home page and try &lt;code&gt;add disqus to your site&lt;/code&gt;, then follow the guide!&lt;/p&gt;

&lt;p&gt;Wait&amp;hellip; Doesn&amp;rsquo;t see the disqus module during using &lt;code&gt;localhost&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Go your  &lt;code&gt;yourSite/themes/hyde-y/layouts/partials/modules/disqus.html&lt;/code&gt; file, comment the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    // if (window.location.hostname == &amp;quot;localhost&amp;quot;)
    //   return;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well you got it!&lt;/p&gt;

&lt;h3 id=&#34;push-on-github-home-page&#34;&gt;Push on Github Home Page&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create repo for &lt;code&gt;your-username.github.io&lt;/code&gt;. Note that the repo name should be your username of your github. Only by this way you can make it as your personal home page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter your project directory.
&lt;code&gt;cd workspace/yourProject&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove your &lt;code&gt;public&lt;/code&gt; folder under this directory.
&lt;code&gt;rm -rf public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Initilize this directory as github repo
&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make &lt;code&gt;public/&lt;/code&gt; directory sync with .github.io
&lt;code&gt;git submodule add git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a file &amp;lsquo;deploy.sh&amp;rsquo; under the your project dir and copy the following:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi

# Push Hugo content 
git add -A
git commit -m &amp;quot;$msg&amp;quot;
git push origin master


# Build the project. 
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.

git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Run the above .sh file
&lt;code&gt;./deploy.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;try-more-i-ll-be-back-soon&#34;&gt;Try more? I&amp;rsquo;ll be back soon!&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>How to do the insite search in Hugo?</title>
      <link>http://xmruibi.github.io/code/BleveSearch/</link>
      <pubDate>Sat, 10 Oct 2015 23:56:15 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/code/BleveSearch/</guid>
      <description>

&lt;p&gt;Since I tried to avoid using the Google tool, searching insite content in static site like Hugo seems a tough thing for me.  However, I just found &lt;a href=&#34;https://github.com/blevesearch/hugoidx&#34;&gt;Bleeve Search&lt;/a&gt;, which is a great tool to assist the insite search.&lt;/p&gt;

&lt;p&gt;There are three steps to adding search to your site. First, you must build the index. Second, you must host the index. Third, you add a search page to your site.&lt;/p&gt;

&lt;h3 id=&#34;building-the-index&#34;&gt;Building the Index&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Preparation: Check you have installed Go. Two ways to install Go, see the instruction in &lt;a href=&#34;https://golang.org/dl/&#34;&gt; Download GO&lt;/a&gt;. Also, be awared to the GOPATH&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export %GOPATH = &amp;quot;.../...&amp;quot;
source etc/profile
echo $GOPATH
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Be sured you&amp;rsquo;ve also installed Mercurial. Check it by command &lt;code&gt;hg&lt;/code&gt;. You can use &lt;code&gt;brew&lt;/code&gt; to install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install &lt;strong&gt;hugoidx&lt;/strong&gt; - this is the command we will use build the search index.  Anytime you update your content and regenerate your site using the &lt;code&gt;hugo&lt;/code&gt; command, you&amp;rsquo;ll also want to rebuild your search index.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/blevesearch/hugoidx
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cd &amp;lt;your hugo site&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;hugoidx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should now have a file named &lt;code&gt;search.bleve&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;hosting-the-index&#34;&gt;Hosting the Index&lt;/h3&gt;

&lt;p&gt;In order to host the index we need to run a small Go program that is available on the internet.  To simplify this process, we have built a reusable application called &lt;code&gt;bleve-hosted&lt;/code&gt;.  You can use this application safely answer queries to the index (read-only operations).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;bleve-hosted&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/blevesearch/bleve-hosted
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cd $GOPATH/src/github.com/blevesearch/bleve-hosted&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;bleve-hosted&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test that its working:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/api/test.bleve/_search -d &#39;{&amp;quot;query&amp;quot;:{&amp;quot;query&amp;quot;:&amp;quot;bleve&amp;quot;}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resulting JSON should include &amp;laquo;total_hits&amp;raquo;: 1&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the &lt;code&gt;search.bleve&lt;/code&gt; index you generated earlier into your &lt;code&gt;indexes/&lt;/code&gt; folder.  (This can really be anywhere, it will always look for an &lt;code&gt;indexes/&lt;/code&gt; folder relative to the current working directly when you launch &lt;code&gt;bleve-hosted&lt;/code&gt;.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Restart &lt;code&gt;bleve-hosted&lt;/code&gt; and optionally configure your server to keep this process running long term (init-scripts, etc)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;add-search-to-your-site&#34;&gt;Add Search to your Site&lt;/h3&gt;

&lt;p&gt;Finally, we&amp;rsquo;re ready to add a search page to our site.  Several files were downloaded as a part of the &lt;code&gt;hugoidx&lt;/code&gt; package to help you get started.  Feel free to customize these files to best adapt them to your site.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd &amp;lt;your hugo site&amp;gt;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the main search page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp $GOPATH/src/github.com/blevesearch/hugoidx/search.md content/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check and copy two Javascript files in my Github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/xmruibi/xmruibi.github.io/blob/master/js/handlebars.js
https://github.com/xmruibi/xmruibi.github.io/blob/master/js/search.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy these two files into your &lt;code&gt;static/&lt;/code&gt; folder. Also, make sure you&amp;rsquo;ve &lt;code&gt;jquery.min.js&lt;/code&gt; in this folder.&lt;/p&gt;

&lt;p&gt;handlebars.js is used to render search results using a simple template syntax.&lt;br /&gt;
search.js is our custom code to bind everything together.&lt;/p&gt;

&lt;p&gt;jQuery is used to make AJAX requests from the browser to &lt;code&gt;bleve-hosted&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update your layout to include these javascript files.  For many sites this will be in a file like &lt;code&gt;layouts/partial/footer.html&lt;/code&gt; or &lt;code&gt;themes/&amp;lt;your theme&amp;gt;/layouts/partials/footer.html&lt;/code&gt;.  In the section where javascript files are being included you&amp;rsquo;ll want to add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;/js/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/handlebars.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;/js/search.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, we need to update search.js to point to the correct URL for &lt;code&gt;bleve-hosted&lt;/code&gt;.  On line 2 of &lt;code&gt;static/js/search.js&lt;/code&gt; modify the value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var searchURL = &#39;http://&amp;lt;your server&amp;gt;:8080/api/search.bleve/_search&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;touch-the-search-function&#34;&gt;Touch the Search function&lt;/h3&gt;

&lt;p&gt;You need to setup file &lt;code&gt;search.html&lt;/code&gt; in &lt;code&gt;layout/partials/modules/site/link&lt;/code&gt;, which is for the search bar in navgation sidebar. And also a &lt;code&gt;search.md&lt;/code&gt; file in your content folder.&lt;/p&gt;

&lt;p&gt;Here provided a great CSS to generate the beautiful search bar. Please check &lt;a href =&#34;https://github.com/xmruibi/xmruibi.github.io/blob/master/css/search.css&#34;&gt; Code &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make you search form includes both components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;input id=&amp;quot;page&amp;quot; name=&amp;quot;p&amp;quot; value=&amp;quot;1&amp;quot; type=&amp;quot;hidden&amp;quot;/&amp;gt;
    &amp;lt;input id=&amp;quot;query&amp;quot; name=&amp;quot;q&amp;quot; type=&amp;quot;search&amp;quot; placeholder=&amp;quot;Search&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Query Classifier</title>
      <link>http://xmruibi.github.io/code/QueryClassifier/</link>
      <pubDate>Mon, 12 Jan 2015 15:33:07 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>http://xmruibi.github.io/code/QueryClassifier/</guid>
      <description>

&lt;p&gt;A system for figuring out the category of user query in search engine and potential subtask of user in group searching task.&lt;/p&gt;

&lt;h2 id=&#34;basically&#34;&gt;Basically&lt;/h2&gt;

&lt;p&gt;Query classifier is some kind of that when you give a query then it return the most possible category or topic of this query.But things are little bit different here. Because this query classifier is a subproject for collaborative search engine.&lt;/p&gt;

&lt;h2 id=&#34;collaborative-search-engine&#34;&gt;Collaborative Search Engine&lt;/h2&gt;

&lt;p&gt;That is a search engine platform for a team not an individual (As you know, most of current search engine are just personized for individual). In here we set some experiments according to the real situation that when a team is addressing some problems around a certain task. For example, we assumed a team are planning to go for a travel, so one of guy focus on booking hotel or airline ticket, one guy focus on studying the route of attractions. Then the collaborative search engine should give each person different ranking results.&lt;/p&gt;

&lt;h2 id=&#34;why-need-query-classifier&#34;&gt;Why need query classifier?&lt;/h2&gt;

&lt;p&gt;We assume that during the collaborative search engine working, a team is working on a certain task. And there is a task statement wrote by natural language. In task statement, the subtopic also indicated by some sentences. (Experiment initial stage) So my query classifier is trying to figure out the input query belong to what kind of subtopic under this task.&lt;/p&gt;

&lt;h2 id=&#34;what-does-classifier-result-look-like&#34;&gt;What does classifier result look like?&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve set two experimental tasks for team searching. One is (Study on Social Media). Another is travel in Helsinki. I did some example queries on Console and screenshot results.&lt;/p&gt;

&lt;p&gt;For traveling task, we assumed we have three people searching on three aspects in Helsinki: culture, dining and outdoor activity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://xmruibi.github.io/media/TravelTask.png&#34; alt=&#34;&#34; &gt;&lt;/p&gt;

&lt;p&gt;For social media study, we assumed five subtopics for team member:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emergence and spread of social networking sites, such as MySpace, Facebook, Twitter, and del.icio.us&lt;/li&gt;
&lt;li&gt;Statistics about popularity of such sites-(How many users? How much time they spend? How much content?)&lt;/li&gt;
&lt;li&gt;Impacts on students and professionals&lt;/li&gt;
&lt;li&gt;Commerce around these sites-(How do they make money? How do users use them to make money?)&lt;/li&gt;
&lt;li&gt;Examples of usage of such services in various domains, such as healthcare and politics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://xmruibi.github.io/media/Socialmedia1.png&#34; alt=&#34;&#34; &gt;
&lt;img src=&#34;http://xmruibi.github.io/media/Socialmedia2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;How about them by scores and rank?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://xmruibi.github.io/media/Socialmedia3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;procedure&#34;&gt;Procedure:&lt;/h2&gt;

&lt;h4 id=&#34;step-0-basic-idea&#34;&gt;Step 0. Basic idea&lt;/h4&gt;

&lt;p&gt;Build language model for each subtopic in one task and get the relevance score between query and subtopic model.&lt;/p&gt;

&lt;h4 id=&#34;step-1-corpus&#34;&gt;Step 1. Corpus&lt;/h4&gt;

&lt;p&gt;Set up Corpus for task and each subtopic
 - Keywords extraction from task statement
     - We believe the keyword should be noun or proper noun or noun phrase from task statement.
     - Then Stanford NLP parser to get part-of-speech tags.&lt;br /&gt;
     - There is a little bit tricky during finding the noun phrase. As we know the NLP parser generate the tagging sentences as a tree. Every leaf of tree is the word in sentence. But we need look up the parent nodes or grandparent nodes of leaves to get the phrase tag. So each time even if we find a word is noun or proper noun we still need to check its upper level nodes and consider its tags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build keywords as query on Google

&lt;ul&gt;
&lt;li&gt;A subtopic can be represent by some keywords combination:&lt;/li&gt;
&lt;li&gt;Those keywords can be formed as the queries&lt;/li&gt;
&lt;li&gt;Fetch the Google Top 20 Results title and snippet as the subtopic model&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;step-2-evaluate-query-and-subtopic-relevance&#34;&gt;Step 2. Evaluate Query and Subtopic Relevance&lt;/h4&gt;

&lt;p&gt;I consider both classical statistic model and language model and get relevance score from two part, but different weights on two models (0.8 and 0.2). As we know language model has better performance. Because, the language model is more rely on the real language rules other than the mathematical statistical rules and  the details of how statistics like term frequency and document
length are used differ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Query Likelihood Model: Dirichlet Smoothing Algorithm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;considering term frequency and collection frequency&lt;/li&gt;
&lt;li&gt;Using a reference model (collection language model) to discriminate unseen words.
    $$P(w|D) = \frac{c(w,M_D)+\mu\cdot P(w|M_C)}{|D|+\mu}$$
    |D| means the length of current document!
    $c(w,M_D)$ means the term frequency in a document&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Vector Space Model: using TF-IDF score&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The vector between subtopic model and query&lt;/li&gt;
&lt;li&gt;but did some query expansion: top 5 snippet from google result as expansion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-implement&#34;&gt;How to implement?&lt;/h2&gt;

&lt;h3 id=&#34;subtopic-language-model&#34;&gt;Subtopic Language Model&lt;/h3&gt;

&lt;h4 id=&#34;1-keyword-extraction&#34;&gt;1. Keyword Extraction&lt;/h4&gt;

&lt;p&gt;Keywords extraction means to extracted keywords from task statement and subtopic statement. These keywords would be combined as queries to search on Google and crawl their Top 20 result as the language model for subtopic.
In this study, I use the Stanford Nature language parser package to extraction noun word leaves from statement as a keyword, moreover, if a certain noun word leaf has parent node which is noun phrase, the noun phrase should be used as keyword.&lt;/p&gt;

&lt;p&gt;Keyword Extraction Example from Task 2 and Task 5
(Word with “+” means the proper noun)&lt;/p&gt;

&lt;p&gt;Keywords for Task 2:
Emergence, spread, social networking sites, Facebook+, Myspace+, Twitter+, Delicious+, statistics, popularity, sites, users, time, impacts, students, professionals, commerce, money, examples, usage, services, domains, healthcare, politics&lt;/p&gt;

&lt;p&gt;Keywords for Task 5:
 friend, four-day vacation, December+, Helsinki+, Finland+, information, vacation, flights, US+, hotels, activities, goal, joint plan, things, Euros, person, group, vacation, outdoor activity, dining activity, cultural activity, types, addition&lt;/p&gt;

&lt;h4 id=&#34;2-corpus-set-up&#34;&gt;2. Corpus Set Up&lt;/h4&gt;

&lt;p&gt;According to the keywords extracted from task or subtopic statement, these keywords can be combined as query for each subtopic. Here are the combination rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1)   Keywords from task statement should regarded as a collection.&lt;/li&gt;
&lt;li&gt;2)   Proper Noun words should regarded as a collection.&lt;/li&gt;
&lt;li&gt;3)   Keywords from each subtopic statement should regarded as a collection.&lt;/li&gt;
&lt;li&gt;4)   Those keywords come from three collections combined as a query represent for each subtopic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these query and search the TOP 20 results on Google, the titles and snippets on the Google result pages can regarded as the corpus for describing each subtopic .&lt;/p&gt;

&lt;h4 id=&#34;3-dirichlet-prior-smoothing&#34;&gt;3. Dirichlet Prior Smoothing&lt;/h4&gt;

&lt;p&gt;Once the corpus built up, We nned build language model for getting the likehood of each query belong to what kind of subtopic. I use Dirichlet Prior Smoothing (DPS) method to get the probability of each term from a query in a certain subtopic language model. Then get product by these probability. The probability can be regarded as score one.&lt;/p&gt;

&lt;h4 id=&#34;4-collection-expansion&#34;&gt;4. Collection Expansion&lt;/h4&gt;

&lt;p&gt;However, sometimes the term may not get any frequency in collection which is shown as c(w,D) in equation due to the collection may not rich enough for some terms. To deal with this problem, I tried to use the title of task as query to search on Google and get its TOP 50 result as the collection background.&lt;/p&gt;

&lt;h2 id=&#34;query-expansion&#34;&gt;Query Expansion&lt;/h2&gt;

&lt;h4 id=&#34;1-expansion-content&#34;&gt;1. Expansion Content&lt;/h4&gt;

&lt;p&gt;For each user query, I first search the query on Google with fetching its TOP 5 results. The titles and snippets are combined as the query’s expansion.&lt;/p&gt;

&lt;h4 id=&#34;2-tfidf-similarity-by-vsm&#34;&gt;2. TFIDF Similarity by VSM&lt;/h4&gt;

&lt;p&gt;For each query expansion content and subtopic description content (Language model), they can be figured out with two vectors according the terms TFIDF values in two contents. Using the VSM model with these two vectors, then can calculate the similarity between query expansion content and subtopic description. The similarity value can be regarded as score two in this study.&lt;/p&gt;

&lt;h3 id=&#34;3-performance-progress&#34;&gt;3.  Performance Progress&lt;/h3&gt;

&lt;p&gt;The experiments are stepping by several stages. At the first stage, only language model with Dirichlet Prior Smoothing score applied to evaluate whether a query matching with the subtopic. Under this case, the precision  of experiment is just over than 0.64. Then after inserting the collection background, the precision is improved to 0.73. Finally, with combining DFS score and VSM similarity score, the precision has lift to over 0.81, which is acceptable for the study. So far, we decide to leave the rest of possible features and only use the DFS score and VSM similarity score for the query – subtopic rank system.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>