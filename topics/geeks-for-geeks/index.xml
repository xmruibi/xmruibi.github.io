<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geeks For Geeks on Geek Think</title>
    <link>http://xmruibi.github.io/topics/geeks-for-geeks/</link>
    <description>Recent content in Geeks For Geeks on Geek Think</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Thu, 19 Nov 2015 20:33:13 -0700</lastBuildDate>
    <atom:link href="http://xmruibi.github.io/topics/geeks-for-geeks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Insert Node for Circular Linked List</title>
      <link>http://xmruibi.github.io/2015/11/19/insert-node-for-circular-linked-list/</link>
      <pubDate>Thu, 19 Nov 2015 20:33:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/19/insert-node-for-circular-linked-list/</guid>
      <description>

&lt;p&gt;Write a function to insert a new node in a sorted Circular Linked List (CLL). For example, if the input CLL is following.&lt;/p&gt;

&lt;h2 id=&#34;solution:ee71923bba76e242d68d338217d1bb7b&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public void insertNode(CNode root, CNode insert) {
		CNode cur = root;
		// step one: find the node just less than root
		do{
			if(cur.val &amp;lt;= insert.val &amp;amp;&amp;amp; cur.next.val &amp;gt;= insert.val)
				break;
			cur = cur.next;
		}while(cur != root);

		CNode tmp = cur.next;
		insert.next = tmp;
		cur.next = insert;
	}
}

class CNode{
	int val;
	CNode next;
	public CNode(int val) {
		this.val = val;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Find if Two Rectangles Overlap</title>
      <link>http://xmruibi.github.io/2015/11/19/find-if-two-rectangles-overlap/</link>
      <pubDate>Thu, 19 Nov 2015 12:33:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/19/find-if-two-rectangles-overlap/</guid>
      <description>

&lt;p&gt;Given two rectangles, find if the given two rectangles overlap or not. Note that a rectangle can be represented by two coordinates, top left and bottom right. So mainly we are given following four coordinates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l1: Top Left coordinate of first rectangle.&lt;/li&gt;
&lt;li&gt;r1: Bottom Right coordinate of first rectangle.&lt;/li&gt;
&lt;li&gt;l2: Top Left coordinate of second rectangle.&lt;/li&gt;
&lt;li&gt;r2: Bottom Right coordinate of second rectangle.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution:349119d14e4a4f28c56258b5d1239743&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public boolean overlapRectangle(Point l1, Point l2, Point r1, Point r2) {
		// If one rectangle is on left side of other
		if (l1.x &amp;gt; r2.x || l2.x &amp;gt; r1.x)
		    return false;		 
		// If one rectangle is above other
		if (l1.y &amp;lt; r2.y || l2.y &amp;lt; r1.y)
		    return false;
		 
		return true;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Greatest Common Divisor</title>
      <link>http://xmruibi.github.io/2015/11/19/greatest-common-divisor/</link>
      <pubDate>Thu, 19 Nov 2015 12:33:13 -0700</pubDate>
      
      <guid>http://xmruibi.github.io/2015/11/19/greatest-common-divisor/</guid>
      <description>

&lt;p&gt;Write a function to find Greatest Common Divisor of an array.&lt;/p&gt;

&lt;h2 id=&#34;solution:5d09a98119ed49836b368e464065fa50&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Solution{
	public int findGCD(int[] arr) {
		if (array == null || array.length == 1)	return 0;
		int gcd = array[0];
		for (int i = 1; i &amp;lt; array.length; i++) {
			gcd = gcd(gcd, array[i]);
		}
		return gcd;
	}

	private int gcd(int num1, int num2) {
		if (num2 &amp;gt; num1)
			return gcd(num2, num1);
		if (num1 == 0 || num2 == 0)	
			return 0;
		while (num1 != 0 &amp;amp;&amp;amp; num2 != 0) {
			int temp = num1 % num2;
			num1 = num2;
			num2 = temp;
		}
		return num1 + num2;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>