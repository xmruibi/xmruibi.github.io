<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Coder Thinking -- Home Page</title>
    <link>xmruibi.github.io/topics/algorithm/</link>
    <description>Recent content in Algorithm on Coder Thinking -- Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xmruibi@gmail.com (Rui Bi)</managingEditor>
    <webMaster>xmruibi@gmail.com (Rui Bi)</webMaster>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Mon, 12 Oct 2015 21:43:13 -0700</lastBuildDate>
    <atom:link href="xmruibi.github.io/topics/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Closest Number</title>
      <link>/xmruibi.github.io/2015/10/12/closest-number/</link>
      <pubDate>Mon, 12 Oct 2015 21:43:13 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/10/12/closest-number/</guid>
      <description>

&lt;p&gt;Given an unsorted array, find out the most closest two elements in this array. Output&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Sort is important here! You must think about sort first. Since other may may cost&lt;/li&gt;
&lt;li&gt;Then the gap between adjacent elements are the&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public ArrayList&lt;int[]&gt; closestNumber(int[] arr){
    ArrayList&lt;int[]&gt; res = new ArrayList&lt;&gt;();
    if(arr == null || arr.length == 0)
        return res;
    Arrays.sort(arr);

    int mindiff = Integer.MAX_VALUE;
    for(int i = 1; i &lt; arr.length; i++) {
        int curdiff = arr[i] - arr[i - 1];
        if(curdiff &gt;= mindiff) {
            if(curdiff &gt; mindiff)
                res.clear();
            int[] cres = new int[]{arr[i - 1], arr[i]};
            res.add(cres);
        }
    }
    return res;
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Route Between Two Nodes in Directed Graph</title>
      <link>/xmruibi.github.io/2015/10/11/route-between-two-nodes-in-directed-graph/</link>
      <pubDate>Sun, 11 Oct 2015 15:14:18 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/10/11/route-between-two-nodes-in-directed-graph/</guid>
      <description>

&lt;p&gt;Given a directed graph, design an algorithm to find out whether there is a route between two nodes.&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Most typical Graph algorithm question!&lt;/li&gt;
&lt;li&gt;Try two ways: DFS, BFS.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
   /**
     * @param graph: A list of Directed graph node
     * @param s: the starting Directed graph node
     * @param t: the terminal Directed graph node
     * @return: a boolean value
     */
     
     // BFS
     public boolean hasRoute(ArrayList&lt;DirectedGraphNode&gt; graph, 
                            DirectedGraphNode s, DirectedGraphNode t) {
        
        if(s == t)
            return true;

        Queue&lt;DirectedGraphNode&gt; queue = new LinkedList&lt;&gt;();
        queue.offer(s);
        graph.remove(s);
        while(!queue.isEmpty()) {
            DirectedGraphNode cur = queue.remove();
            graph.remove(cur);
            for(DirectedGraphNode next : cur.neighbors) {
                if(!graph.contains(next))
                    continue;
                if(next == t)
                    return true;
                queue.offer(next);
            }
        }
        return false;
    }
     
     
    // DFS
    public boolean hasRoute(ArrayList&lt;DirectedGraphNode&gt; graph, 
                            DirectedGraphNode s, DirectedGraphNode t) {
        // write your code here
        if(s == t)
            return true;
            
        graph.remove(s);
        for(DirectedGraphNode next : s.neighbors) {
            if(!graph.contains(next))
                    continue;
            if(hasRoute(graph, next, t))
                return true;
        }
        graph.add(s);
        return false;
    }
}


&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search In 2D Matrix II</title>
      <link>/xmruibi.github.io/2015/09/22/search-in-2d-matrix-ii/</link>
      <pubDate>Tue, 22 Sep 2015 13:35:30 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/22/search-in-2d-matrix-ii/</guid>
      <description>

&lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.&lt;/p&gt;

&lt;p&gt;This matrix has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Integers in each row are sorted from left to right.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integers in each column are sorted from up to bottom.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No duplicate integers in each row or column.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Typical Matrix Search Problem, using a condition for driven coordinate moving.&lt;/li&gt;
&lt;li&gt;Here the value and target comparasion is the driven condition.&lt;/li&gt;
&lt;li&gt;Since the sorted matrix, we can start from right top element.&lt;/li&gt;
&lt;li&gt;Because on the diagonal from right top to left down, all the left elements are less than the right elments.&lt;/li&gt;
&lt;li&gt;So we have three type of running condition and set the x, y coordinate differently.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param: A number you want to search in the matrix
     * @return: An integer indicate the occurrence of target in the given matrix
     */

    public int searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0)
            return 0;
        int rightTop = matrix[0][matrix[0].length - 1];
        int x = 0, y = matrix[0].length - 1;
        int occ = 0;
        while(x &lt; matrix.length &amp;&amp; y &gt;= 0) {
            int cur = matrix[x][y];
            if(cur == target) {
                occ ++;
                x++; y--;
            }else if(cur &lt; target)
                x++;
            else
                y--;
        }       
        return occ;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Search In 2D Matrix I</title>
      <link>/xmruibi.github.io/2015/09/21/search-in-2d-matrix-i/</link>
      <pubDate>Mon, 21 Sep 2015 13:37:08 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/21/search-in-2d-matrix-i/</guid>
      <description>

&lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix.&lt;/p&gt;

&lt;p&gt;This matrix has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integers in each row are sorted from left to right.&lt;/li&gt;
&lt;li&gt;The first integer of each row is greater than the last integer of the previous row.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;First binary search with checking the first element in each row so that we can find the row may contain the target number;&lt;/li&gt;
&lt;li&gt;So we search the lowbound of target number. However, we also can do if the element is just equals to target number then directly return for reducing time.&lt;/li&gt;
&lt;li&gt;Once we get the target row, then we do the second binary search in this row to find the target number.&lt;/li&gt;
&lt;li&gt;All in all, two binary search to find the target!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    public boolean searchMatrix(int[][] matrix, int target) {
        // write your code here
        if(matrix == null || matrix.length == 0)
            return false;
        
        int up = 0, down = matrix.length - 1;
        while(up &lt; down - 1) {
            int mrow = up + ((down - up) &gt;&gt; 1);
            if(matrix[mrow][0] == target)
                return true;
            if(matrix[mrow][0] &lt; target)
                up = mrow;
            else
                down = mrow;
        }
        int curRow;
        if(matrix[up][0] &gt; target)
            return false;
        else if(matrix[up][0] &lt;= target &amp;&amp; matrix[down][0] &gt; target)
            curRow = up;
        else
            curRow = down;
        
        int l = 0, r = matrix[curRow].length - 1;
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt; 1);
            if(matrix[curRow][m] == target)
                return true;
            else if(matrix[curRow][m] &lt; target)
                l = m;
            else
                r = m;
        }
        
        if(matrix[curRow][l] == target || matrix[curRow][r] == target)
            return true;
        else
            return false;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Set Matrix Zeroes</title>
      <link>/xmruibi.github.io/2015/09/18/set-matrix-zeroes/</link>
      <pubDate>Fri, 18 Sep 2015 22:10:29 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/18/set-matrix-zeroes/</guid>
      <description>

&lt;p&gt;Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use the first row (up row) and the first col (left col) to record the position info of zeroes in matrix;&lt;/li&gt;
&lt;li&gt;But we also need to set two boolean value to check if there is zero in first row and first col;&lt;/li&gt;
&lt;li&gt;Then go through the matrix again, when [i][0] is marked zero or [0][j] is marked zero set current position as zero! This is important!;&lt;/li&gt;
&lt;li&gt;Finally, go back to check two boolean value, and set that row or col as zero if boolean value is true;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @return: Void
     */
    public void setZeroes(int[][] matrix) {

        if(matrix == null || matrix.length == 0)
            return;
        
        boolean row = false;
        boolean col = false;
                        
        for(int i = 0; i &lt; matrix.length; i++)
            if(matrix[i][0] == 0)
                col = true;
                
        for(int j = 0; j &lt; matrix[0].length; j++)
            if(matrix[0][j] == 0)
                row = true;
        
        for(int i = 1; i &lt; matrix.length; i++)
            for(int j = 1; j &lt; matrix[i].length; j++) 
                if(matrix[i][j] == 0) {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
                
        for(int i = 1; i &lt; matrix.length; i++){ 
            for(int j = 1; j &lt; matrix[0].length; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0)
                    matrix[i][j] = 0;
            }   
        }
        
        if(row)
            for(int j = 0; j &lt; matrix[0].length; j++)
                    matrix[0][j] = 0;
                    
        if(col)
            for(int i = 0; i &lt; matrix.length; i++)
                    matrix[i][0] = 0;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Fast Power</title>
      <link>/xmruibi.github.io/2015/09/11/fast-power/</link>
      <pubDate>Fri, 11 Sep 2015 19:06:42 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/11/fast-power/</guid>
      <description>

&lt;p&gt;Calculate the an % b where a, b and n are all 32bit integers.&lt;/p&gt;

&lt;p&gt;*Example: *
 For 231 % 3 = 2
 For 1001000 % 1000 = 0&lt;/p&gt;

&lt;p&gt;*Challenge: *
 O(logn)&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Divide and Conquer&lt;/li&gt;
&lt;li&gt;Think about the two basic condition: n is 1 and n is 0;&lt;/li&gt;
&lt;li&gt;Each time we divide the n into two part (n/2);&lt;/li&gt;
&lt;li&gt;Then we got the combine value (divide * divide) from both parts (they&amp;rsquo;re eqaul, actually);&lt;/li&gt;
&lt;li&gt;While n is odd, we need to add one more &amp;laquo;a&amp;raquo; time (*a);&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
class Solution {
    /*
     * @param a, b, n: 32bit integers
     * @return: An integer
     */
    public int fastPower(int a, int b, int n) {

        if(n == 1)
            return a % b;
        
        if(n == 0)
            return 1 % b;
        
        long divide = fastPower(a, b, n/2);
        long combine = divide * divide;
        combine %= b;
        if(n % 2 == 1)
            combine *= (long)a;
        combine %= b;
        return (int)combine;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rotate Image</title>
      <link>/xmruibi.github.io/2015/09/11/rotate-image/</link>
      <pubDate>Fri, 11 Sep 2015 16:06:19 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/11/rotate-image/</guid>
      <description>

&lt;p&gt;You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise).&lt;/p&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Headache Implement question!&lt;/li&gt;
&lt;li&gt;Very carefully to treat index.&lt;/li&gt;
&lt;li&gt;Only calculate the &amp;frac14; of index in matrix!&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @return: Void
     */
    public void rotate(int[][] matrix) {
        
        int n = matrix.length;

        // One of i or j need to consider boundry!
        for(int i = 0; i &lt; ( n &gt;&gt; 1); i ++) {
        // that&#39;s why j &lt; (n+1) / 2, that is the boundry!
            for(int j = 0; j &lt; ( n+1 &gt;&gt; 1); j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[n - j - 1][i];
                matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1];
                matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1];
                matrix[j][n - i - 1] = tmp;
            }
        }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum I</title>
      <link>/xmruibi.github.io/2015/09/09/subarray-sum-i/</link>
      <pubDate>Wed, 09 Sep 2015 10:40:49 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/09/subarray-sum-i/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.&lt;/p&gt;

&lt;pre&gt;
    &lt;code class=&#34;java&#34;&gt;
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public ArrayList&lt;Integer&gt; subarraySum(int[] nums) {
        // write your code here
        ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
        if(nums == null || nums.length == 0)
            return res;       
        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer&gt;();
        int sum = 0;
        map.put(0, 0);
        for(int i = 0; i &lt; nums.length; i++) {
            if(map.containsKey(sum+nums[i])) {
                res.add(map.get(sum+nums[i]));
                res.add(i);
                return res;
            }
            map.put(sum+=nums[i], i+1);
        }
        return res;
    }
}   

&lt;/code&gt;

&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Subarray Sum II</title>
      <link>/xmruibi.github.io/2015/09/08/subarray-sum-ii/</link>
      <pubDate>Tue, 08 Sep 2015 21:18:09 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/08/subarray-sum-ii/</guid>
      <description>&lt;p&gt;Given an integer array, find a subarray where the sum of numbers is between two given interval. Your code should return the number of possible answer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public int subarraySumII(int[] A, int start, int end) {
    int res = 0;
        for(int i = 1; i &lt; A.length; i++)
            A[i] += A[i - 1];
        
        Arrays.sort(A);
        for(int i = 0; i &lt; A.length; i++) {
            if(A[i] &gt;= start &amp;&amp; A[i] &lt;= end)
                res++;
            // start &lt;= A[i] - A[j] &lt;= end
            // so the max bound and min bound of A[j] are following:
            int max = A[i] - start;
            int min = A[i] - end;
            // max + 1 make sure the right bound of max value and also index problem
            int range = findInsPos(A, max + 1) - findInsPos(A, min);
            res += range;
        }
        return res;
}
private int findInsPos(int[] A, int value) {
        int l = 0, r = A.length - 1;
        
        while(l &lt; r - 1) {
            int m = l + ((r - l) &gt;&gt;1);
            if(A[m] &lt; value)
                l = m;
            else
                r = m;
        }
        if(A[l] &gt;= value)
            return l;
        else
            return r;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Algorithm Questions Conclusion</title>
      <link>/xmruibi.github.io/2015/08/11/algorithm-questions-conclusion/</link>
      <pubDate>Tue, 11 Aug 2015 00:04:29 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/08/11/algorithm-questions-conclusion/</guid>
      <description>

&lt;h4 id=&#34;preface&#34;&gt;Preface:&lt;/h4&gt;

&lt;p&gt;This is the collection of interview questions concluded by me, which is including questions from LeetCode, Cracking Code Interview, and Handwriting Coding Handbook.&lt;/p&gt;

&lt;h2 id=&#34;main&#34;&gt;Main:&lt;/h2&gt;

&lt;h3 id=&#34;1-basic-algorithm-part&#34;&gt;1. Basic Algorithm Part:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linked List Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71287&#34;&gt;https://www.zybuluo.com/xmruibi/note/71287&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stack &amp;amp; Queue Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71283&#34;&gt;https://www.zybuluo.com/xmruibi/note/71283&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Binary Tree Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/56634&#34;&gt;https://www.zybuluo.com/xmruibi/note/56634&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mathematical Problem Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71211&#34;&gt;https://www.zybuluo.com/xmruibi/note/71211&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Big Number Problem Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71208&#34;&gt;https://www.zybuluo.com/xmruibi/note/71208&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-data-structure&#34;&gt;2. Data Structure:&lt;/h3&gt;

&lt;h4 id=&#34;java-collection-summary&#34;&gt;Java Collection Summary&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Abstract Collection
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71477&#34;&gt;https://www.zybuluo.com/xmruibi/note/71477&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;list&#34;&gt;- List&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;List Interface &amp;amp; Abstract List &amp;amp; Abstract Sequential List
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71582&#34;&gt;https://www.zybuluo.com/xmruibi/note/71582&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ArrayList
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71425&#34;&gt;https://www.zybuluo.com/xmruibi/note/71425&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;set&#34;&gt;- Set&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Set &amp;amp; Abstract Set
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71585&#34;&gt;https://www.zybuluo.com/xmruibi/note/71585&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;map&#34;&gt;- Map&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Map &amp;amp; Abstract Map
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71595&#34;&gt;https://www.zybuluo.com/xmruibi/note/71595&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;HashMap
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71622&#34;&gt;https://www.zybuluo.com/xmruibi/note/71622&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;graph&#34;&gt;- Graph&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Undirected Graph&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Directed Graph&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-algorithm-thinking&#34;&gt;3 Algorithm Thinking&lt;/h3&gt;

&lt;h4 id=&#34;sort&#34;&gt;Sort&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Comparsion Sort Problems Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71280&#34;&gt;https://www.zybuluo.com/xmruibi/note/71280&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linear Sort Solutions Summary:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Big Data Sort Solutions Summary:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;search&#34;&gt;Search&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Binary Search Summary:
&lt;a href=&#34;https://www.zybuluo.com/xmruibi/note/71214&#34;&gt;https://www.zybuluo.com/xmruibi/note/71214&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;dfs-and-bfs&#34;&gt;DFS AND BFS&lt;/h4&gt;

&lt;h4 id=&#34;divide-and-conquer&#34;&gt;Divide and Conquer&lt;/h4&gt;

&lt;h4 id=&#34;dynamic-programming&#34;&gt;Dynamic Programming&lt;/h4&gt;

&lt;h3 id=&#34;4-misc&#34;&gt;4 Misc.&lt;/h3&gt;

&lt;h3 id=&#34;5-java-techs&#34;&gt;5 Java Techs&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>