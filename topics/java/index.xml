<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Coder Thinking -- Home Page</title>
    <link>xmruibi.github.io/topics/java/</link>
    <description>Recent content in Java on Coder Thinking -- Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xmruibi@gmail.com (Rui Bi)</managingEditor>
    <webMaster>xmruibi@gmail.com (Rui Bi)</webMaster>
    <copyright>(c) 2015 Rui Bi.</copyright>
    <lastBuildDate>Sat, 12 Sep 2015 00:00:00 -0700</lastBuildDate>
    <atom:link href="xmruibi.github.io/topics/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What Is Good Java API</title>
      <link>/xmruibi.github.io/2015/09/12/what-is-good-java-api/</link>
      <pubDate>Sat, 12 Sep 2015 00:00:00 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/09/12/what-is-good-java-api/</guid>
      <description>

&lt;p&gt;Here are some good points for designing a good Java API!&lt;/p&gt;

&lt;h2 id=&#34;rule-1-establish-strong-terms&#34;&gt;Rule #1: Establish strong terms&lt;/h2&gt;

&lt;p&gt;If your API grows, there will be repetitive use of the same terms, over and over again. For instance, some actions will be come in several flavours resulting in various classes / types / methods, that differ only subtly in behaviour. The fact that they’re similar should be reflected by their names. Names should use strong terms. Take JDBC for instance. No matter how you execute a Statement, you will always use the term execute to do it. For instance, you will call any of these methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute(String)
executeBatch()
executeQuery(String)
executeUpdate(String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a similar fashion, you will always use the term close to release resources, no matter which resource you’re releasing. For instance, you will call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Connection.close()
Statement.close()
ResultSet.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a matter of fact, close is such a strong and established term in the JDK, that it has lead to the interfaces java.io.Closeable (since Java 1.5), and java.lang.AutoCloseable (since Java 1.7), which generally establish a contract of releasing resources.&lt;/p&gt;

&lt;p&gt;Rule violation: Observable&lt;/p&gt;

&lt;p&gt;This rule is violated a couple of times in the JDK. For instance, in the java.util.Observable class. While other “Collection-like” types established the terms&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;size()
remove()
removeAll()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… this class declares&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;countObservers()
deleteObserver(Observer)
deleteObservers()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no good reason for using other terms in this context. The same applies to Observer.update(), which should really be called notify(), an otherwise established term in JDK APIs&lt;/p&gt;

&lt;p&gt;Rule violation: Spring. Most of it&lt;/p&gt;

&lt;p&gt;Spring has really gotten popular in the days when J2EE was weird, slow, and cumbersome. Think about EJB 2.0… There may be similar opinions on Spring out there, which are off-topic for this post. Here’s how Spring violates this concrete rule. A couple of random examples where Spring fails to establish strong terms, and uses long concatenations of meaningless, inconcise words instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AbstractBeanFactoryBasedTargetSourceCreator
AbstractInterceptorDrivenBeanDefinitionDecorator
AbstractRefreshablePortletApplicationContext
AspectJAdviceParameterNameDiscoverer
BeanFactoryTransactionAttributeSourceAdvisor
ClassPathScanningCandidateComponentProvider
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… this could go on indefinitely, my favourite being …&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apart from “feeling” like a horrible API (to me), here’s some more objective analysis:&lt;/p&gt;

&lt;p&gt;What’s the difference between a Creator and a Factory
What’s the difference between a Source and a Provider?
What’s the non-subtle difference between an Advisor and a Provider?
What’s the non-subtle difference between a Discoverer and a Provider?
Is an Advisor related to an AspectJAdvice?
Is it a ScanningCandidate or a CandidateComponent?
What’s a TargetSource? And how would it be different from a SourceTarget if not a SourceSource or my favourite: A SourceSourceTargetProviderSource?
Gary Fleming commented on my previous blog post about Spring’s funny class names:&lt;/p&gt;

&lt;p&gt;I’d be willing to bet that a Markov-chain generated class name (based on Spring Security) would be indistinguishable from the real thing.&lt;/p&gt;

&lt;p&gt;Back to more seriousness…&lt;/p&gt;

&lt;h2 id=&#34;rule-2-apply-symmetry-to-term-combinations&#34;&gt;Rule #2: Apply symmetry to term combinations&lt;/h2&gt;

&lt;p&gt;Once you’ve established strong terms, you will start combining them. When you look at the JDK’s Collection APIs, you will notice the fact that they are symmetric in a way that they’ve established the terms add(), remove(), contains(), and all, before combining them symmetrically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add(E)
addAll(Collection&amp;lt;? extends E&amp;gt;)
remove(Object)
removeAll(Collection&amp;lt;?&amp;gt;)
contains(Object)
containsAll(Collection&amp;lt;?&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the Collection type is a good example where an exception to this rule may be acceptable, when a method doesn’t “pull its own weight”. This is probably the case for retainAll(Collection&amp;lt;?&amp;gt;), which doesn’t have an equivalent retain(E) method. It might just as well be a regular violation of this rule, though.&lt;/p&gt;

&lt;p&gt;####Rule violation: Map&lt;/p&gt;

&lt;p&gt;This rule is violated all the time, mostly because of some methods not pulling their own weight (which is ultimately a matter of taste). With Java 8′s defender methods, there will no longer be any excuse of not adding default implementations for useful utility methods that should’ve been on some types. For instance: Map. It violates this rule a couple of times:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has keySet() and also containsKey(Object)&lt;/li&gt;
&lt;li&gt;It has values() and also containsValue(Object)&lt;/li&gt;
&lt;li&gt;It has entrySet() but no containsEntry(K, V)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Observe also, that there is no point of using the term Set in the method names. The method signature already indicates that the result has a Set type. It would’ve been more consistent and symmetric if those methods would’ve been named keys(), values(), entries(). (On a side-note, Sets and Lists are another topic that I will soon blog about, as I think those types do not pull their own weight either)&lt;/p&gt;

&lt;p&gt;At the same time, the Map interface violates this rule by providing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;put(K, V) and also putAll(Map)&lt;/li&gt;
&lt;li&gt;remove(Object), but no removeAll(Collection&amp;lt;?&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides, establishing the term clear() instead of reusing removeAll() with no arguments is unnecessary. This applies to all Collection API members. In fact, the clear() method also violates rule #1. It is not immediately obvious, if clear does anything subtly different from remove when removing collection elements.&lt;/p&gt;

&lt;h2 id=&#34;rule-3-add-convenience-through-overloading&#34;&gt;Rule #3: Add convenience through overloading&lt;/h2&gt;

&lt;p&gt;There is mostly only one compelling reason, why you would want to overload a method: Convenience. Often you want to do precisely the same thing in different contexts, but constructing that very specific method argument type is cumbersome. So, for convenience, you offer your API users another variant of the same method, with a “friendlier” argument type set. This can be observed again in the Collection type. We have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;toArray(), which is a convenient overload of…
toArray(T[])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another example is the Arrays utility class. We have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;copyOf(T[], int), which is an incompatible overload of…
copyOf(boolean[], int), and of…
copyOf(int[], int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and all the others
Overloading is mostly used for two reasons:&lt;/p&gt;

&lt;p&gt;Providing “default” argument behaviour, as in Collection.toArray()
Supporting several incompatible, yet “similar” argument sets, as in Arrays.copyOf()
Other languages have incorporated these concepts into their language syntax. Many languages (e.g. PL/SQL) formally support named default arguments. Some languages (e.g. JavaScript) don’t even care how many arguments there really are. And another, new JVM language called Ceylon got rid of overloading by combining the support for named, default arguments with union types. As Ceylon is a statically typed language, this is probable the most powerful approach of adding convenience to your API.&lt;/p&gt;

&lt;p&gt;####Rule violation: TreeSet&lt;/p&gt;

&lt;p&gt;It is hard to find a good example of a case where this rule is violated in the JDK. But there is one: the TreeSet and TreeMap. Their constructors are overloaded several times. Let’s have a look at these two constructors:&lt;/p&gt;

&lt;p&gt;TreeSet(Collection&amp;lt;? extends E&amp;gt;)
TreeSet(SortedSet&lt;E&gt;)
The latter “cleverly” adds some convenience to the first in that it extracts a well-known Comparator from the argument SortedSet to preserve ordering. This behaviour is quite different from the compatible (!) first constructor, which doesn’t do an instanceof check of the argument collection. I.e. these two constructor calls result in different behaviour:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SortedSet&amp;lt;Object&amp;gt; original = // [...]
// Preserves ordering:
new TreeSet&amp;lt;Object&amp;gt;(original);
// Resets ordering:
new TreeSet&amp;lt;Object&amp;gt;((Collection&amp;lt;Object&amp;gt;) original);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These constructors violate the rule in that they produce completely different behaviour. They’re not just mere convenience.&lt;/p&gt;

&lt;h2 id=&#34;rule-4-consistent-argument-ordering&#34;&gt;Rule #4: Consistent argument ordering&lt;/h2&gt;

&lt;p&gt;Be sure that you consistently order arguments of your methods. This is an obvious thing to do for overloaded methods, as you can immediately see how it is better to always put the array first and the int after in the previous example from the Arrays utility class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;copyOf(T[], int), which is an incompatible overload of…
copyOf(boolean[], int)
copyOf(int[], int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… and all the others
But you will quickly notice that all methods in that class will put the array being operated on first. Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;binarySearch(Object[], Object)
copyOfRange(T[], int, int)
fill(Object[], Object)
sort(T[], Comparator&amp;lt;? super T&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####Rule violation: Arrays&lt;/p&gt;

&lt;p&gt;The same class also “subtly” violates this rule in that it puts optional arguments in between other arguments, when overloading methods. For instance, it declares&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fill(Object[], Object)
fill(Object[], int, int, Object)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the latter should’ve been fill(Object[], Object, int, int). This is a “subtle” rule violation, as you may also argue that those methods in Arrays that restrict an argument array to a range will always put the array and the range argument together. In that way, the fill() method would again follow the rule as it provides the same argument order as copyOfRange(), for instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fill(Object[], int, int, Object)
copyOfRange(T[], int, int)
copyOfRange(T[], int, int, Class)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will never be able to escape this problem if you heavily overload your API. Unfortunately, Java doesn’t support named parameters, which helps formally distinguishing arguments in a large argument list, as sometimes, large argument lists cannot be avoided.&lt;/p&gt;

&lt;p&gt;Rule violation: String&lt;/p&gt;

&lt;p&gt;Another case of a rule violation is the String class:&lt;/p&gt;

&lt;p&gt;regionMatches(int, String, int, int)
regionMatches(boolean, int, String, int, int)
The problems here are:&lt;/p&gt;

&lt;p&gt;It is hard to immediately understand the difference between the two methods, as the optional boolean argument is inserted at the beginning of the argument list
It is hard to immediately understand the purpose of every int argument, as there are many arguments in a single method&lt;/p&gt;

&lt;h2 id=&#34;rule-5-establish-return-value-types&#34;&gt;Rule #5: Establish return value types&lt;/h2&gt;

&lt;p&gt;This may be a bit controversial as people may have different views on this topic. No matter what your opinion is, however, you should create a consistent, regular API when it comes to defining return value types. An example rule set (on which you may disagree):&lt;/p&gt;

&lt;p&gt;Methods returning a single object should return null when no object was found
Methods returning several objects should return an empty List, Set, Map, array, etc. when no object was found (never null)
Methods should only throw exceptions in case of an … well, an exception
With such a rule set, it is not a good practice to have 1-2 methods lying around, which:&lt;/p&gt;

&lt;p&gt;… throw ObjectNotFoundExceptions when no object was found
… return null instead of empty Lists
Rule violation: File&lt;/p&gt;

&lt;p&gt;File is an example of a JDK class that violates many rules. Among them, the rule of regular return types. Its File.list() Javadoc reads:&lt;/p&gt;

&lt;p&gt;An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns null if this abstract pathname does not denote a directory, or if an I/O error occurs.&lt;/p&gt;

&lt;p&gt;So, the correct way to iterate over file names (if you’re doing defensive programming) is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String[] files = file.list();
// You should never forget this null check!
if (files != null) {
    for (String file : files) {
    // Do things with your file
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, we could argue that the Java 5 expert group could’ve been nice with us and worked that null check into their implementation of the foreach loop. Similar to the missing null check when switching over an enum (which should lead to the default: case). They’ve probably preferred the “fail early” approach in this case.
The point here is that File already has sufficient means of checking if file is really a directory (File.isDirectory()). And it should throw an IOException if something went wrong, instead of returning null. This is a very strong violation of this rule, causing lots of pain at the call-site… Hence:&lt;/p&gt;

&lt;p&gt;NEVER return null when returning arrays or collections!&lt;/p&gt;

&lt;p&gt;####Rule violation: JPA&lt;/p&gt;

&lt;p&gt;An example of how JPA violates this rule is the way how entities are retrieved from the EntityManager or from a Query:&lt;/p&gt;

&lt;p&gt;EntityManager.find() methods return null if no entity could be found
Query.getSingleResult() throws a NoResultException if no entity could be found
As NoResultException is a RuntimeException this flaw heavily violates the Principle of Least Astonishment, as you might stay unaware of this difference until runtime!&lt;/p&gt;

&lt;p&gt;IF you insist on throwing NoResultExceptions, make them checked exceptions as client code MUST handle them&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Immutable Classes</title>
      <link>/xmruibi.github.io/2015/08/11/immutable-classes/</link>
      <pubDate>Tue, 11 Aug 2015 23:57:44 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/08/11/immutable-classes/</guid>
      <description>

&lt;h3 id=&#34;what-is-immutable-classes&#34;&gt;What is Immutable Classes&lt;/h3&gt;

&lt;p&gt;不可变对象（immutable objects），后面文章我将使用immutable objects来代替不可变对象！&lt;/p&gt;

&lt;p&gt;那么什么是immutable objects?什么又是mutable Objects呢？&lt;/p&gt;

&lt;p&gt;immutable Objects就是那些一旦被创建，它们的状态就不能被改变的Objects，每次对他们的改变都是产生了新的immutable的对象，而mutable Objects就是那些创建后，状态可以被改变的Objects.&lt;/p&gt;

&lt;p&gt;举个例子：String和StringBuilder，String是immutable的，每次对于String对象的修改都将产生一个新的String对象，而原来的对象保持不变，而StringBuilder是mutable，因为每次对于它的对象的修改都作用于该对象本身，并没有产生新的对象。&lt;/p&gt;

&lt;p&gt;但有的时候String的immutable特性也会引起安全问题，这就是密码应该存放在字符数组中而不是String中的原因！&lt;/p&gt;

&lt;p&gt;immutable objects 比传统的mutable对象在多线程应用中更具有优势，它不仅能够保证对象的状态不被改变，而且还可以不使用锁机制就能被其他线程共享。&lt;/p&gt;

&lt;p&gt;实际上JDK本身就自带了一些immutable类，比如String，Integer以及其他包装类。为什么说String是immutable的呢？比如：java.lang.String 的trim，uppercase,substring等方法，它们返回的都是新的String对象，而并不是直接修改原来的对象。&lt;/p&gt;

&lt;p&gt;如何在Java中写出Immutable的类？&lt;/p&gt;

&lt;p&gt;要写出这样的类，需要遵循以下几个原则：&lt;/p&gt;

&lt;p&gt;1）immutable对象的状态在创建之后就不能发生改变，任何对它的改变都应该产生一个新的对象。&lt;/p&gt;

&lt;p&gt;2）Immutable类的所有的field都应该是final的。&lt;/p&gt;

&lt;p&gt;3）对象必须被正确的创建，比如：对象引用在对象创建过程中不能泄露(leak)。&lt;/p&gt;

&lt;p&gt;4）对象应该是final的，以此来限制子类继承父类，以避免子类改变了父类的immutable特性。&lt;/p&gt;

&lt;p&gt;5）如果类中包含mutable类对象，那么返回给客户端的时候，返回该对象的一个拷贝，而不是该对象本身（该条可以归为第一条中的一个特例）&lt;/p&gt;

&lt;p&gt;当然不完全遵守上面的原则也能够创建immutable的类，比如String的hashcode就不是final的，但它能保证每次调用它的值都是一致的，无论你多少次计算这个值，它都是一致的，因为这些值的是通过计算final的属性得来的！&lt;/p&gt;

&lt;p&gt;另外，如果你的Java类中存在很多可选的和强制性的字段，你也可以使用建造者模式来创建一个immutable的类。&lt;/p&gt;

&lt;p&gt;下面是一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final class Contacts {
 
    private final String name;
    private final String mobile;
 
    public Contacts(String name, String mobile) {
        this.name = name;
        this.mobile = mobile;
    }
   
    public String getName(){
        return name;
    }
   
    public String getMobile(){
        return mobile;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们为类添加了final修饰，从而避免因为继承和多态引起的immutable风险。
上面是最简单的一种实现immutable类的方式，可以看到它的所有属性都是final的。&lt;/p&gt;

&lt;p&gt;有时候你要实现的immutable类中可能包含mutable的类，比如java.util.Date,尽管你将其设置成了final的，但是它的值还是可以被修改的，为了避免这个问题，我们建议返回给用户该对象的一个拷贝，这也是Java的最佳实践之一。下面是一个创建包含mutable类对象的immutable类的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final class ImmutableReminder{
    private final Date remindingDate;
   
    public ImmutableReminder (Date remindingDate) {
        if(remindingDate.getTime() &amp;lt; System.currentTimeMillis()){
            throw new IllegalArgumentException(&amp;quot;Can not set reminder” +
                        “ for past time: &amp;quot; + remindingDate);
        }
        this.remindingDate = new Date(remindingDate.getTime());
    }
   
    public Date getRemindingDate() {
        return (Date) remindingDate.clone();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的getRemindingDate()方法可以看到，返回给用户的是类中的remindingDate属性的一个拷贝，这样的话如果别人通过getRemindingDate()方法获得了一个Date对象，然后修改了这个Date对象的值，那么这个值的修改将不会导致ImmutableReminder类对象中remindingDate值的修改。
使用Immutable类的好处：
1）Immutable对象是线程安全的，可以不用被synchronize就在并发环境中共享&lt;/p&gt;

&lt;p&gt;2）Immutable对象简化了程序开发，因为它无需使用额外的锁机制就可以在线程间共享&lt;/p&gt;

&lt;p&gt;3）Immutable对象提高了程序的性能，因为它减少了synchroinzed的使用&lt;/p&gt;

&lt;p&gt;4）Immutable对象是可以被重复使用的，你可以将它们缓存起来重复使用，就像字符串字面量和整型数字一样。你可以使用静态工厂方法来提供类似于valueOf（）这样的方法，它可以从缓存中返回一个已经存在的Immutable对象，而不是重新创建一个。&lt;/p&gt;

&lt;p&gt;immutable也有一个缺点就是会制造大量垃圾，由于他们不能被重用而且对于它们的使用就是”用“然后”扔“，字符串就是一个典型的例子，它会创造很多的垃圾，给垃圾收集带来很大的麻烦。当然这只是个极端的例子，合理的使用immutable对象会创造很大的价值。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AccessControl</title>
      <link>/xmruibi.github.io/2015/07/12/accesscontrol/</link>
      <pubDate>Sun, 12 Jul 2015 00:03:07 -0700</pubDate>
      <author>xmruibi@gmail.com (Rui Bi)</author>
      <guid>/xmruibi.github.io/2015/07/12/accesscontrol/</guid>
      <description>&lt;p&gt;Reading Note while reading Java Best Practice.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Access Level&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Private:&lt;/li&gt;
&lt;li&gt;Package-private: Default&lt;/li&gt;
&lt;li&gt;Protected:&lt;/li&gt;
&lt;li&gt;Public&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make each class or member as inaccessiable as possible!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Implements Serializable may leak this class in API.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instance field and static field must not be public!
Lost the control of this field and not thread safety but may be okay for immutable final instance field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An array with not-zero length is mutable!
Cannnot return public static array field.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The only two ways to return above field is by establish a immutable list or create a public method returning clone object!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t expose the internal data field:
public class should not expose any mutable field;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>